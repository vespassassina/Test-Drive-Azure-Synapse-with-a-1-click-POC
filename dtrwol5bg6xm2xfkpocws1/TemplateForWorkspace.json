{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dtrwol5bg6xm2xfkpocws1"
		},
		"dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:dtrwol5bg6xm2xfkpocws1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"TripFaresSynapseAnalyticsLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TripFaresSynapseAnalyticsLinkedService'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().SynapseWorkspaceName};Initial Catalog=@{linkedService().SQLDedicatedPoolName};User ID=@{linkedService().SQLLoginUsername}"
		},
		"AzureSqlDatabaseAdvWorks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAdvWorks'"
		},
		"dtrprotectedstorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'dtrprotectedstorage'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/"
		},
		"HttpServerTripDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/trip-data.csv"
		},
		"HttpServerTripFareDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/fares-data.csv"
		},
		"keyVaultLinkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().keyVaultName,'.vault.azure.net/')}"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "d2910e0f-a763-4dd8-9c8d-0105ccd0570e"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "Synapse2ClickPoc"
		},
		"TripFaresDataLakeStorageLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().datalakeAccountName,'.dfs.core.windows.net')}"
		},
		"TextAnalytics_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "d2910e0f-a763-4dd8-9c8d-0105ccd0570e"
		},
		"AnomalyDetector_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "d2910e0f-a763-4dd8-9c8d-0105ccd0570e"
		},
		"dtrprotectedstorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dtrprotectedstorage.dfs.core.windows.net"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dtrwol5bg6xm2xfkpoc.dfs.core.windows.net"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-kusto-3969455475-v2')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1",
				"groupId": "Kusto",
				"fqdns": [
					"dtrdemopool.dtrwol5bg6xm2xfkpocws1.kusto.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--dtrwol5bg6xm2xfkpocws1')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"dtrwol5bg6xm2xfkpocws1-ondemand.39694554-7530-4bc0-b083-416e21baa7b6.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--dtrwol5bg6xm2xfkpocws1')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1",
				"groupId": "sql",
				"fqdns": [
					"dtrwol5bg6xm2xfkpocws1.39694554-7530-4bc0-b083-416e21baa7b6.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/DTRProtectedStorageEndpoint')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Storage/storageAccounts/dtrprotectedstorage",
				"groupId": "dfs",
				"fqdns": [
					"dtrprotectedstorage.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws1sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 60
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 40,
					"minNodeCount": 3
				},
				"nodeCount": 5,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark32')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 60
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create external table with SQL')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* Note: this script is filtered on a specific month. You can modify the location to read the entire dataset. */\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat')\n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat]\n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyctlc_azureopendatastorage_blob_core_windows_net')\n\tCREATE EXTERNAL DATA SOURCE [nyctlc_azureopendatastorage_blob_core_windows_net]\n\tWITH (\n\t\tLOCATION = 'wasbs://nyctlc@azureopendatastorage.blob.core.windows.net',\n\t\tTYPE     = HADOOP\n\t)\nGO\n\nCREATE EXTERNAL TABLE nyc_tlc_yellow_trip_ext (\n\t[vendorID] varchar(8000),\n\t[tpepPickupDateTime] datetime2(7),\n\t[tpepDropoffDateTime] datetime2(7),\n\t[passengerCount] int,\n\t[tripDistance] float,\n\t[puLocationId] varchar(8000),\n\t[doLocationId] varchar(8000),\n\t[startLon] float,\n\t[startLat] float,\n\t[endLon] float,\n\t[endLat] float,\n\t[rateCodeId] int,\n\t[storeAndFwdFlag] varchar(8000),\n\t[paymentType] varchar(8000),\n\t[fareAmount] float,\n\t[extra] float,\n\t[mtaTax] float,\n\t[improvementSurcharge] varchar(8000),\n\t[tipAmount] float,\n\t[tollsAmount] float,\n\t[totalAmount] float\n\t)\n\tWITH (\n    LOCATION = 'yellow/puYear=2014/puMonth=3/',\n    -- LOCATION = 'yellow'\n\tDATA_SOURCE = [nyctlc_azureopendatastorage_blob_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat],\n\tREJECT_TYPE = VALUE,\n\tREJECT_VALUE = 0\n\t)\nGO\n\nSELECT TOP 100 * FROM nyc_tlc_yellow_trip_ext\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dtrwol5bg6xm2xfkpocws1p1",
						"poolName": "dtrwol5bg6xm2xfkpocws1p1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query data with SQL')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\nFull tutorial available on: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/tutorial-data-analyst\nIn this tutorial, you learn how to perform exploratory data analysis by combining different Azure Open Datasets\nusing serverless SQL pool and then visualizing the results in Azure Synapse Studio.\n\nIn particular, you analyze the New York City (NYC) Taxi dataset that includes:\n\n - Pickup and drop-off dates and times.\n - Pick up and drop-off locations.\n - Trip distances.\n - Itemized fares.\n - Rate types.\n - Payment types.\n - Driver-reported passenger counts.*/\n\n\n/*\n * * * * * * * * * * * * * * * *\n * Automatic schema inference  *\n * * * * * * * * * * * * * * * *\n\nSince data is stored in the Parquet file format, automatic schema inference is available.\nYou can easily query the data without listing the data types of all columns in the files.\nYou also can use the virtual column mechanism and the filepath function to filter out a certain subset of files.\n\nLet's first get familiar with the NYC Taxi data by running the following query. */\n\nSELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2019/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc];\n\n\n/* Similarly, you can query the Public Holidays dataset by using the following query. */\n\nSELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/holidaydatacontainer/Processed/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [holidays];\n\n/* Lastly, you can also query the Weather Data dataset by using the following query. */\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/isdweatherdatacontainer/ISDWeather/year=2018/month=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [weather];\n\n/* You can learn more about the meaning of the individual columns in the descriptions\nof the NYC Taxi, Public Holidays, and Weather Data datasets on the Azure Opendatasets page. */\n\n\n/*\n * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Time series, seasonality, and outlier analysis  *\n * * * * * * * * * * * * * * * * * * * * * * * * * *\nYou can easily summarize the yearly number of taxi rides by using the following query. */\n\nSELECT\n    YEAR(tpepPickupDateTime) AS current_year,\n    COUNT(*) AS rides_per_year\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) >= '2014' AND nyc.filepath(1) <= '2019'\nGROUP BY YEAR(tpepPickupDateTime)\nORDER BY 1 ASC;\n\n/* The data can be visualized in Synapse Studio by switching from the Table to the Chart view.\nYou can choose among different chart types, such as Area, Bar, Column, Line, Pie, and Scatter.\nIn this case, plot the Column chart with the Category column set to current_year.\n\nFrom this visualization, a trend of a decreasing number of rides over years can be clearly seen.\nPresumably, this decrease is due to the recent increased popularity of ride-sharing companies.\n*/\n\n\n/*You can focus the analysis on a single year, for example, 2016. The following query returns the daily number of rides during that year:*/\nSELECT\n    CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n    COUNT(*) as rides_per_day\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) = '2016'\nGROUP BY CAST([tpepPickupDateTime] AS DATE)\nORDER BY 1 ASC;\n\n\n/*Next, see if the drop in rides correlates with public holidays. \nCheck if there's a correlation by joining the NYC Taxi rides dataset with the Public Holidays dataset:*/\n\nWITH taxi_rides AS (\nSELECT\n    CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n    COUNT(*) as rides_per_day\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) = '2016'\nGROUP BY CAST([tpepPickupDateTime] AS DATE)\n),\npublic_holidays AS (\nSELECT\n    holidayname as holiday,\n    date\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/holidaydatacontainer/Processed/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [holidays]\nWHERE countryorregion = 'United States' AND YEAR(date) = 2016\n),\njoined_data AS (\nSELECT\n    *\nFROM taxi_rides t\nLEFT OUTER JOIN public_holidays p on t.current_day = p.date\n)\n\nSELECT \n    *,\n    holiday_rides = \n    CASE   \n      WHEN holiday is null THEN 0   \n      WHEN holiday is not null THEN rides_per_day\n    END   \nFROM joined_data\nORDER BY current_day ASC;\n\n/*From the plot chart, you can see that during public holidays the number of taxi rides is lower. \nThere's still one unexplained large drop on January 23. \nLet's check the weather in NYC on that day by querying the Weather Data dataset:*/\n\nSELECT\n    AVG(windspeed) AS avg_windspeed,\n    MIN(windspeed) AS min_windspeed,\n    MAX(windspeed) AS max_windspeed,\n    AVG(temperature) AS avg_temperature,\n    MIN(temperature) AS min_temperature,\n    MAX(temperature) AS max_temperature,\n    AVG(sealvlpressure) AS avg_sealvlpressure,\n    MIN(sealvlpressure) AS min_sealvlpressure,\n    MAX(sealvlpressure) AS max_sealvlpressure,\n    AVG(precipdepth) AS avg_precipdepth,\n    MIN(precipdepth) AS min_precipdepth,\n    MAX(precipdepth) AS max_precipdepth,\n    AVG(snowdepth) AS avg_snowdepth,\n    MIN(snowdepth) AS min_snowdepth,\n    MAX(snowdepth) AS max_snowdepth\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/isdweatherdatacontainer/ISDWeather/year=*/month=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [weather]\nWHERE countryorregion = 'US' AND CAST([datetime] AS DATE) = '2016-01-23' AND stationname = 'JOHN F KENNEDY INTERNATIONAL AIRPORT';\n\n/*\nThe results of the query indicate that the drop in the number of taxi rides occurred because:\nThere was a blizzard on that day in NYC with heavy snow (~30 cm).\nIt was cold (temperature was below zero degrees Celsius).\nIt was windy (~10 m/s).\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [AddressID]\n,[AddressLine1]\n,[AddressLine2]\n,[City]\n,[StateProvince]\n,[CountryRegion]\n,[PostalCode]\n,[rowguid]\n,[ModifiedDate]\n FROM [AdventureWorksIngested].[dbo].[Addresses]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "AdventureWorksIngested",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [datetime]\n,[country_code]\n,[vendorID]\n,[lpepPickupDatetime]\n,[passengerCount]\n,[tripDistance]\n,[tipAmount]\n,[totalAmount]\n,[tripType]\n,[puYear]\n,[puMonth]\n,[month_num]\n,[day_of_month]\n,[day_of_week]\n,[hour_of_day]\n,[countryOrRegion]\n,[holidayName]\n,[normalizeHolidayName]\n,[isPaidTimeOff]\n,[date]\n,[avg_snowDepth]\n,[avg_temperature]\n,[max_precipTime]\n,[max_precipDepth]\n FROM [nyctaxi].[dbo].[nyc_taxi_holiday_weather]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyctaxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/adventureworks/Address/SalesLTAddress.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripFareDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripFareDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripsDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsFaresData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "FaresData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTripsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "TripsData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsSchema')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": "AggregateTaxiData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"keyVaultName": {
						"type": "string",
						"defaultValue": "kvmsft"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "adlsmsft"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "fares-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "surcharge",
						"type": "String"
					},
					{
						"name": "mta_tax",
						"type": "String"
					},
					{
						"name": "tip_amount",
						"type": "String"
					},
					{
						"name": "tolls_amount",
						"type": "String"
					},
					{
						"name": "total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"datalakeAccountName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cz8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdvWorks",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabaseAdvWorks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_cz8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "adventureworks"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_5ty')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TaxiFaresData2",
						"fileSystem": "public"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_5ty')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "nyc_tlc_yellow_trip_ext"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripFareDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripFareDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspaceTripsFares')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "8bceb16c-f7a2-429c-b9c1-aacf4e8e00b5",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyVaultLinkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string",
						"defaultValue": "kvdtrwol5bg6xm2xfkpoc"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyVaultLinkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "DTR-AML",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataLakeStorageLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					},
					"datalakeAccountName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TripFaresDataLakeStorageLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "adlsAccessKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresSynapseAnalyticsLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('TripFaresSynapseAnalyticsLinkedService_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "synapseSqlLoginPassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabaseAdvWorks')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAdvWorks_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TextAnalytics')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CognitiveService",
				"typeProperties": {
					"subscriptionId": "[parameters('TextAnalytics_properties_typeProperties_subscriptionId')]",
					"resourceGroup": "synapse2clickpoc",
					"csName": "dtrtextanalytics",
					"csKind": "TextAnalytics",
					"csLocation": "westeurope",
					"endPoint": "https://dtrtextanalytics.cognitiveservices.azure.com/",
					"csKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": "kvdtrwol5bg6xm2xfkpoc"
							}
						},
						"secretName": "TextAnalytics"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AnomalyDetector')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CognitiveService",
				"typeProperties": {
					"subscriptionId": "[parameters('AnomalyDetector_properties_typeProperties_subscriptionId')]",
					"resourceGroup": "synapse2clickpoc",
					"csName": "dtranomalydetector",
					"csKind": "AnomalyDetector",
					"csLocation": "westeurope",
					"endPoint": "https://dtranomalydetector.cognitiveservices.azure.com/",
					"csKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": "kvdtrwol5bg6xm2xfkpoc"
							}
						},
						"secretName": "AnomalyDetector"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dtrprotectedstorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dtrprotectedstorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('dtrprotectedstorage_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IntegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KQL Query Demos')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "// https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/tutorial?context=%2Fazure%2Fsynapse-analytics%2Fcontext%2Fcontext&pivots=azuredataexplorer\n\n//count\nStormEvents | count\n\n//filter\nStormEvents\n| where StartTime > datetime(2007-02-01) and StartTime < datetime(2007-03-01)\n| where EventType == 'Flood' and State == 'CALIFORNIA'\n| project StartTime, EndTime , State , EventType , EpisodeNarrative\n\n//take\nStormEvents\n| take 5\n| project  StartTime, EndTime, EventType, State, EventNarrative\n\n//top 5\nStormEvents\n| top 5 by StartTime desc\n| project  StartTime, EndTime, EventType, State, EventNarrative  \n\n//top 5\nStormEvents\n| sort by StartTime desc\n| take 5\n| project  StartTime, EndTime, EventType, EventNarrative\n\n//compute derived columns\nStormEvents\n| limit 5\n| extend Duration = EndTime - StartTime \n| project StartTime, EndTime, Duration, EventType, State\n\n//calculate\nprint x=1\n| extend x = x + 1, y = x\n| extend x = x + 1\n\n//aggregate\nStormEvents\n| summarize event_count = count() by State\n\n//summarize by scalar\nStormEvents\n| where StartTime > datetime(2007-02-14) and StartTime < datetime(2007-02-21)\n| summarize event_count = count() by bin(StartTime, 1d)\n\n//render\nStormEvents \n| summarize event_count=count(), mid = avg(BeginLat) by State \n| sort by mid\n| where event_count > 1800\n| project State, event_count\n| render columnchart\n\n//timechart\nStormEvents\n| summarize event_count=count() by bin(StartTime, 1d)\n| render timechart\n\n//multiple series\nStormEvents \n| where StartTime > datetime(2007-06-04) and StartTime < datetime(2007-06-10) \n| where Source in (\"Source\",\"Public\",\"Emergency Manager\",\"Trained Spotter\",\"Law Enforcement\")\n| summarize count() by bin(StartTime, 10h), Source\n| render timechart\n\n//daily avg\nStormEvents\n| extend hour = floor(StartTime % 1d , 1h)\n| summarize event_count=count() by hour\n| sort by hour asc\n| render timechart\n\n//distribution\nStormEvents\n| extend  duration = EndTime - StartTime\n| where duration > 0s\n| where duration < 3h\n| summarize event_count = count()\n    by bin(duration, 5m)\n| sort by duration asc\n| render timechart\n\n//percentiles\nStormEvents\n| extend  duration = EndTime - StartTime\n| where duration > 0s\n| where duration < 3h\n| summarize event_count = count()\n    by bin(duration, 5m), State\n| sort by duration asc\n| summarize percentiles(duration, 5, 20, 50, 80, 95) by State\n\n\n\n",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dtrdemopool",
						"databaseName": "DTRDB"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adworks')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "adworks",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://public@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/adworks",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "db61e2bb-00e7-4f39-ab03-7a65a90be173"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adworkstarget')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "adworkstarget",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://public@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/adworkstarget",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "dtrwol5bg6xm2xfkpocws1-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "5c951cda-1428-45c8-8fa5-fde0b36d9c64"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdventureWorksIngested')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AdventureWorksIngested",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://adventureworks@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "AzureDataLakeStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 2,
							"ObjectId": "78b9e18d-2904-404c-8cfb-3c137be437bb"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adworks_copy_lbi')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "adworks_copy_lbi",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://public@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/adworks",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "AzureDataLakeStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "bf7cec0d-62fa-4f66-9f00-ebbda30c11db"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMDatabase')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CDMDatabase",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Manufacturing\",\"Version\":\"1.1.0\"}}}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "AzureDataLakeStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "7e83b12d-5eab-4cc9-87c9-6492b4e1d286"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AccountingBasis",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "AccountingBasisId",
										"Description": "The unique identifier of an Accounting Basis.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingBasis.cdm.json/AccountingBasis",
											"Name": "AccountingBasisId"
										}
									},
									{
										"Name": "AccountingBasisName",
										"Description": "The name of an Accounting Basis.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingBasis.cdm.json/AccountingBasis",
											"Name": "AccountingBasisName"
										}
									},
									{
										"Name": "AccountingBasisDescription",
										"Description": "The description of an Accounting Basis.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingBasis.cdm.json/AccountingBasis",
											"Name": "AccountingBasisDescription"
										}
									}
								],
								"ColumnSetEntityName": "ede902ee-0c39-422b-a744-6ba70b939562",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingBasis",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingBasis",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"AccountingBasisId\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisId\"},\"AccountingBasisName\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisName\"},\"AccountingBasisDescription\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AccountingBasis\",\"path\":\"AccountingBasis.cdm.json/AccountingBasis\"},\"description\":\"The accounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\\n\\nEx:\\nCASH BASIS ACCOUNTING\\nRevenue is recorded only when cash is received and an expense is recorded only when cash is paid. \\n\\nMost businesses use the accrual basis, which individuals and professional people sue the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables.\\n\\nACCRUAL BASIS ACCOUNTING\\nAccounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\\n\\nMost businesses use the accrual basis, which individuals and professional people use the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables.\",\"primaryKey\":[\"AccountingBasisId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Basis.\",\"isNullable\":false,\"name\":\"AccountingBasisId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of an Accounting Basis.\",\"isNullable\":true,\"name\":\"AccountingBasisName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingBasis.cdm.json/AccountingBasis\",\"name\":\"AccountingBasisDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of an Accounting Basis.\",\"isNullable\":true,\"name\":\"AccountingBasisDescription\"}]}}}",
								"Description": "The accounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\n\nEx:\nCASH BASIS ACCOUNTING\nRevenue is recorded only when cash is received and an expense is recorded only when cash is paid. \n\nMost businesses use the accrual basis, which individuals and professional people sue the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables.\n\nACCRUAL BASIS ACCOUNTING\nAccounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\n\nMost businesses use the accrual basis, which individuals and professional people use the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "AccountingBasisId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"AccountingBasisId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingBasisName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingBasisDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "a66ded87-7674-4037-8468-a166321c629c",
							"Description": "The accounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\n\nEx:\nCASH BASIS ACCOUNTING\nRevenue is recorded only when cash is received and an expense is recorded only when cash is paid. \n\nMost businesses use the accrual basis, which individuals and professional people sue the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables.\n\nACCRUAL BASIS ACCOUNTING\nAccounting basis in which transactions that change a company's financial statements are recorded in the periods in which the events occur, rather than in the periods in which the company receives or pays cash.\n\nMost businesses use the accrual basis, which individuals and professional people use the cash basis.   The cash basis is not normally suitable when there are significant amounts of inventories, receivables and payables."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AccountingPolicy",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.\n\nIn this case it is the business, organization or legal entity whose books are being recorded and financial statements presented.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "AccountingPolicyId",
										"Description": "The unique identifier of a policy.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "AccountingPolicyId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the policy is applicable.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the policy is applicable.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "AccountingPolicyText",
										"Description": "The text of an accounting policy.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "AccountingPolicyText"
										}
									},
									{
										"Name": "AccountingFrameworkStandardSection",
										"Description": "The section of the Accounting Framework Standard to which the policy applies.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "AccountingFrameworkStandardSection"
										}
									},
									{
										"Name": "AccountingFrameworkId",
										"Description": "The unique identifier of an Accounting Framework.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "AccountingFrameworkId"
										}
									},
									{
										"Name": "AccountingFrameworkStandardId",
										"Description": "The unique identifier of an Accounting Framework Standard.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingPolicy.cdm.json/AccountingPolicy",
											"Name": "AccountingFrameworkStandardId"
										}
									}
								],
								"ColumnSetEntityName": "a41d2302-1999-453e-a8a7-033892a51b3f",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingPolicy",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingPolicy",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"LegalEntityId\"},\"AccountingPolicyId\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingPolicyId\"},\"PeriodStartDate\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"PeriodEndDate\"},\"AccountingPolicyText\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingPolicyText\"},\"AccountingFrameworkStandardSection\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkStandardSection\"},\"AccountingFrameworkId\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkId\"},\"AccountingFrameworkStandardId\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkStandardId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AccountingPolicy\",\"path\":\"AccountingPolicy.cdm.json/AccountingPolicy\"},\"description\":\"An accounting policy that is based on the Accounting Framework Standard.\",\"primaryKey\":[\"LegalEntityId\",\"AccountingPolicyId\",\"PeriodStartDate\",\"PeriodEndDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\\n\\nIn this case it is the business, organization or legal entity whose books are being recorded and financial statements presented.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingPolicyId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a policy.\",\"isNullable\":false,\"name\":\"AccountingPolicyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the policy is applicable.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the policy is applicable.\",\"isNullable\":false,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingPolicyText\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The text of an accounting policy.\",\"isNullable\":true,\"name\":\"AccountingPolicyText\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkStandardSection\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The section of the Accounting Framework Standard to which the policy applies.\",\"isNullable\":true,\"name\":\"AccountingFrameworkStandardSection\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Framework.\",\"isNullable\":true,\"name\":\"AccountingFrameworkId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingPolicy.cdm.json/AccountingPolicy\",\"name\":\"AccountingFrameworkStandardId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Framework Standard.\",\"isNullable\":true,\"name\":\"AccountingFrameworkStandardId\"}]}}}",
								"Description": "An accounting policy that is based on the Accounting Framework Standard.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,AccountingPolicyId,PeriodStartDate,PeriodEndDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingPolicyId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingPolicyText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingFrameworkStandardSection\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingFrameworkId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingFrameworkStandardId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "17269f19-d167-4228-8597-a9ee62608b1e",
							"Description": "An accounting policy that is based on the Accounting Framework Standard."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Auditor",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "AuditorId",
										"Description": "The unique identifier of an Auditor.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "AuditorId"
										}
									},
									{
										"Name": "AuditorName",
										"Description": "The name of an Auditor.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "AuditorName"
										}
									},
									{
										"Name": "PartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "PartyId"
										}
									},
									{
										"Name": "DunsNumber",
										"Description": "An exclusive nine-digit Dun & Bradstreet D-U-N-S Number is assigned to each business location in a global database, it is widely used as a tool for identifying, organizing and consolidating information about businesses. Companies worldwide use it to link information about suppliers, customers and trading partners, providing them a more complete picture of risks and opportunities in their business relationships.\n\nD&B D-U-N-S Numbers are the key to building corporate family relationships in the D&B file. Since each location of a business may have its own unique D&B D-U-N-S Number, a large organization is likely to have many different D&B D-U-N-S Numbers within its corporate \"family tree\". D&B links the D&B D-U-N-S Numbers of parents, subsidiaries, headquarters and branches on more than 6.0 million corporate family members around the world.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 9,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "DunsNumber"
										}
									},
									{
										"Name": "GlobalUltimateDunsNumber",
										"Description": "One of eight (8) types of business relationships defined in the D&B file:\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 9,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "GlobalUltimateDunsNumber"
										}
									},
									{
										"Name": "DomesticUltimateDunsNumber",
										"Description": "One of eight (8) types of business relationships defined in the D&B file:\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 9,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "DomesticUltimateDunsNumber"
										}
									},
									{
										"Name": "ParentDunsNumber",
										"Description": "One of eight (8) types of business relationships defined in the D&B file:\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 9,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "ParentDunsNumber"
										}
									},
									{
										"Name": "SubsidiaryIndicator",
										"Description": "Indicates that the entity is a subsidiary.\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "SubsidiaryIndicator"
										}
									},
									{
										"Name": "DivisionIndicator",
										"Description": "Indicates that the entity is a division.\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "DivisionIndicator"
										}
									},
									{
										"Name": "BranchIndicator",
										"Description": "Indicates that the entity is a branch.\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "BranchIndicator"
										}
									},
									{
										"Name": "HeadquartersIndicator",
										"Description": "Indicates that the entity is a headquarters.\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "HeadquartersIndicator"
										}
									},
									{
										"Name": "SingleLocationSubsidiaryIndicator",
										"Description": "Indicates that the entity is a single location subsidiary.\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Auditor.cdm.json/Auditor",
											"Name": "SingleLocationSubsidiaryIndicator"
										}
									}
								],
								"ColumnSetEntityName": "61f0f4dd-6818-4ea4-80c2-783b94e7812d",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/Auditor",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/Auditor",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"AuditorId\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"AuditorId\"},\"AuditorName\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"AuditorName\"},\"PartyId\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"PartyId\"},\"DunsNumber\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DunsNumber\"},\"GlobalUltimateDunsNumber\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"GlobalUltimateDunsNumber\"},\"DomesticUltimateDunsNumber\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DomesticUltimateDunsNumber\"},\"ParentDunsNumber\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"ParentDunsNumber\"},\"SubsidiaryIndicator\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"SubsidiaryIndicator\"},\"DivisionIndicator\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DivisionIndicator\"},\"BranchIndicator\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"BranchIndicator\"},\"HeadquartersIndicator\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"HeadquartersIndicator\"},\"SingleLocationSubsidiaryIndicator\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"SingleLocationSubsidiaryIndicator\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Auditor\",\"path\":\"Auditor.cdm.json/Auditor\"},\"description\":\"The party that audits and qualified the associated financial statement.\",\"primaryKey\":[\"AuditorId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"AuditorId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Auditor.\",\"isNullable\":false,\"name\":\"AuditorId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"AuditorName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of an Auditor.\",\"isNullable\":true,\"name\":\"AuditorName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"PartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":true,\"name\":\"PartyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DunsNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":9,\"description\":\"An exclusive nine-digit Dun & Bradstreet D-U-N-S Number is assigned to each business location in a global database, it is widely used as a tool for identifying, organizing and consolidating information about businesses. Companies worldwide use it to link information about suppliers, customers and trading partners, providing them a more complete picture of risks and opportunities in their business relationships.\\n\\nD&B D-U-N-S Numbers are the key to building corporate family relationships in the D&B file. Since each location of a business may have its own unique D&B D-U-N-S Number, a large organization is likely to have many different D&B D-U-N-S Numbers within its corporate \\\"family tree\\\". D&B links the D&B D-U-N-S Numbers of parents, subsidiaries, headquarters and branches on more than 6.0 million corporate family members around the world.\",\"isNullable\":true,\"scale\":0,\"name\":\"DunsNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"GlobalUltimateDunsNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":9,\"description\":\"One of eight (8) types of business relationships defined in the D&B file:\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"scale\":0,\"name\":\"GlobalUltimateDunsNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DomesticUltimateDunsNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":9,\"description\":\"One of eight (8) types of business relationships defined in the D&B file:\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\",\"isNullable\":true,\"scale\":0,\"name\":\"DomesticUltimateDunsNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"ParentDunsNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":9,\"description\":\"One of eight (8) types of business relationships defined in the D&B file:\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\",\"isNullable\":true,\"scale\":0,\"name\":\"ParentDunsNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"SubsidiaryIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the entity is a subsidiary.\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\",\"isNullable\":true,\"name\":\"SubsidiaryIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"DivisionIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the entity is a division.\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\",\"isNullable\":true,\"name\":\"DivisionIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"BranchIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the entity is a branch.\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\",\"isNullable\":true,\"name\":\"BranchIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"HeadquartersIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the entity is a headquarters.\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\",\"isNullable\":true,\"name\":\"HeadquartersIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Auditor.cdm.json/Auditor\",\"name\":\"SingleLocationSubsidiaryIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the entity is a single location subsidiary.\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\",\"isNullable\":true,\"name\":\"SingleLocationSubsidiaryIndicator\"}]}}}",
								"Description": "The party that audits and qualified the associated financial statement.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "AuditorId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"AuditorId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AuditorName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PartyId\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DunsNumber\",\"type\":\"decimal(9,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GlobalUltimateDunsNumber\",\"type\":\"decimal(9,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DomesticUltimateDunsNumber\",\"type\":\"decimal(9,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ParentDunsNumber\",\"type\":\"decimal(9,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SubsidiaryIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DivisionIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"BranchIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"HeadquartersIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SingleLocationSubsidiaryIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "d7513c7a-0815-4821-97fe-4e7021340939",
							"Description": "The party that audits and qualified the associated financial statement."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AuditorReport",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.\n\nIn this case it is the business, organization or legal entity whose books are being recorded and financial statements presented.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "AuditorReportDate",
										"Description": "The date of the auditor report.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorReportDate"
										}
									},
									{
										"Name": "AuditorOpeningStatement",
										"Description": "The opening statement of the Auditor Report as prepared by the Independent Auditor.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorOpeningStatement"
										}
									},
									{
										"Name": "ManagementResponsibilityStatement",
										"Description": "A statement regarding the responsibility of Management for the preparation of the Consolidate Financial Statements.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "ManagementResponsibilityStatement"
										}
									},
									{
										"Name": "AuditorResponsibilityStatement",
										"Description": "A statement regarding the responsibility of the Auditor in preparing the Auditor Report. .",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorResponsibilityStatement"
										}
									},
									{
										"Name": "AuditorOpinionStatement",
										"Description": "The opinion statement that the Independent Auditor wishes to make regarding the preparation of the set of financial statements.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorOpinionStatement"
										}
									},
									{
										"Name": "AuditorOtherStatement",
										"Description": "Any other statement that the Independent Auditor wishes to make regarding the preparation of the set of financial statements.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorOtherStatement"
										}
									},
									{
										"Name": "AuditorReportText",
										"Description": "The report says that auditors audited the financial statements and that the statements are 'the responsibility of management'.    It also says that the financial statements fairly present the financial results.\n\nThe auditors assure the audience that the statements were prepared in conformity with IFRS.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorReportText"
										}
									},
									{
										"Name": "QualifiedOpinionIndicator",
										"Description": "Indicates that the auditors call attention to exceptions.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "QualifiedOpinionIndicator"
										}
									},
									{
										"Name": "AdverseOpinionIndicator",
										"Description": "An opinion by an external auditor stating that the financial statements were not presented fairly or in accordance with IFRS.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AdverseOpinionIndicator"
										}
									},
									{
										"Name": "AuditorId",
										"Description": "The unique identifier of an Auditor.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AuditorReport.cdm.json/AuditorReport",
											"Name": "AuditorId"
										}
									}
								],
								"ColumnSetEntityName": "7fae3f52-3f39-4a8c-b737-d59ba695a902",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AuditorReport",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AuditorReport",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"LegalEntityId\"},\"PeriodStartDate\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"PeriodEndDate\"},\"AuditorReportDate\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorReportDate\"},\"AuditorOpeningStatement\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOpeningStatement\"},\"ManagementResponsibilityStatement\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"ManagementResponsibilityStatement\"},\"AuditorResponsibilityStatement\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorResponsibilityStatement\"},\"AuditorOpinionStatement\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOpinionStatement\"},\"AuditorOtherStatement\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOtherStatement\"},\"AuditorReportText\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorReportText\"},\"QualifiedOpinionIndicator\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"QualifiedOpinionIndicator\"},\"AdverseOpinionIndicator\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AdverseOpinionIndicator\"},\"AuditorId\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AuditorReport\",\"path\":\"AuditorReport.cdm.json/AuditorReport\"},\"description\":\"A statement from the auditors (accountants) that they have examined a business' books of accounts to check whether they have been properly kept and whether they represent a true and fair view of the company's trading according to the accounting guidelines in use by the business.\",\"primaryKey\":[\"LegalEntityId\",\"PeriodStartDate\",\"PeriodEndDate\",\"AuditorReportDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\\n\\nIn this case it is the business, organization or legal entity whose books are being recorded and financial statements presented.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorReportDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date of the auditor report.\",\"isNullable\":false,\"name\":\"AuditorReportDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOpeningStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The opening statement of the Auditor Report as prepared by the Independent Auditor.\",\"isNullable\":true,\"name\":\"AuditorOpeningStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"ManagementResponsibilityStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A statement regarding the responsibility of Management for the preparation of the Consolidate Financial Statements.\",\"isNullable\":true,\"name\":\"ManagementResponsibilityStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorResponsibilityStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A statement regarding the responsibility of the Auditor in preparing the Auditor Report. .\",\"isNullable\":true,\"name\":\"AuditorResponsibilityStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOpinionStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The opinion statement that the Independent Auditor wishes to make regarding the preparation of the set of financial statements.\",\"isNullable\":true,\"name\":\"AuditorOpinionStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorOtherStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"Any other statement that the Independent Auditor wishes to make regarding the preparation of the set of financial statements.\",\"isNullable\":true,\"name\":\"AuditorOtherStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorReportText\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The report says that auditors audited the financial statements and that the statements are 'the responsibility of management'.    It also says that the financial statements fairly present the financial results.\\n\\nThe auditors assure the audience that the statements were prepared in conformity with IFRS.\",\"isNullable\":true,\"name\":\"AuditorReportText\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"QualifiedOpinionIndicator\"},\"dataType\":\"boolean\",\"description\":\"Indicates that the auditors call attention to exceptions.\",\"isNullable\":true,\"name\":\"QualifiedOpinionIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AdverseOpinionIndicator\"},\"dataType\":\"boolean\",\"description\":\"An opinion by an external auditor stating that the financial statements were not presented fairly or in accordance with IFRS.\",\"isNullable\":true,\"name\":\"AdverseOpinionIndicator\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AuditorReport.cdm.json/AuditorReport\",\"name\":\"AuditorId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Auditor.\",\"isNullable\":true,\"name\":\"AuditorId\"}]}}}",
								"Description": "A statement from the auditors (accountants) that they have examined a business' books of accounts to check whether they have been properly kept and whether they represent a true and fair view of the company's trading according to the accounting guidelines in use by the business.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,PeriodStartDate,PeriodEndDate,AuditorReportDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AuditorReportDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AuditorOpeningStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ManagementResponsibilityStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AuditorResponsibilityStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AuditorOpinionStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AuditorOtherStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AuditorReportText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"QualifiedOpinionIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AdverseOpinionIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AuditorId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "072ee702-1145-4664-9b4f-9fcf2d58878d",
							"Description": "A statement from the auditors (accountants) that they have examined a business' books of accounts to check whether they have been properly kept and whether they represent a true and fair view of the company's trading according to the accounting guidelines in use by the business."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "BalanceSheet",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "FinancialStatementId",
										"Description": "The unique identifier of a Financial Statement.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "FinancialStatementId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CurrentAssetsCashAmount",
										"Description": "Cash in any form - such as waiting to be deposited, in bank accounts, checking accounts.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsCashAmount"
										}
									},
									{
										"Name": "CurrentAssetsNotesReceivableAmount",
										"Description": "Written promises to receive stated sums of money at future dates, classified as current (if due within 12 months) or non-current (if due after 12 months) of the balance sheet date.\n\nRead more: http://www.businessdictionary.com/definition/notes-receivable.html#ixzz17ie7v8jz",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsNotesReceivableAmount"
										}
									},
									{
										"Name": "CurrentAssetsInventoriesAmount",
										"Description": "Inventories are items held for sale or used in the manufacture of products that will be sold.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsInventoriesAmount"
										}
									},
									{
										"Name": "CurrentAssetsPrepaidExpensesAmount",
										"Description": "Expenses such as insurance, rent, property taxes that are paid in advance.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsPrepaidExpensesAmount"
										}
									},
									{
										"Name": "CurrentAssetsMarketableSecuritiesAmount",
										"Description": "Cash substitutes that is temporarily invested to earn a return.   These are short-term maturity instruments of less than one year maturity.\n\nThey should be relatively 'riskless' securities or investments.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsMarketableSecuritiesAmount"
										}
									},
									{
										"Name": "CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount",
										"Description": "Accounts receivables are customer balances on outstanding credit sales that are reported at their net realizable value - minus any allowance for doubtful accounts.\n\nDoubtful accounts are those the management judges to be uncollectible during the account period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount"
										}
									},
									{
										"Name": "CurrentAssetsTotalAmount",
										"Description": "The total amount of current assets.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentAssetsTotalAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsPropertyPlantAndEquipmentLandAmount",
										"Description": "Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\n\nThey are considered tangible because they have physical substance.\n\nLand as a fixed asset refers to property used in the business.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsPropertyPlantAndEquipmentLandAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount",
										"Description": "Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\n\nThey are considered tangible because they have physical substance.\n\nBuildings include buildings and structures owned by the company.   Leasehold improvements are additions or improvements made to leased structures.    They are amortized by the lessee over the economic life of the improvement or the life of the lease whichever is shorter.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount",
										"Description": "Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\n\nThey are considered tangible because they have physical substance.\n\nEquipment represents the original cost including delivery and installation of the machinery and equipment used in business operations.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount",
										"Description": "Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\n\nThey are considered tangible because they have physical substance.\n\nThis is the accumulated depreciation and amortization for property, plant and equipment.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsMortgagesPayableAmount",
										"Description": "The mortgages held by the company.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsMortgagesPayableAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsLeaseholds",
										"Description": "Leasehold is a form of property tenure where one party buys the right to occupy land or a building for a given length of time. A lease is a legal estate leasehold that can be bought and sold on the open market and differs from a tenancy where a property is let on a periodic basis such as weekly or monthly",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsLeaseholds"
										}
									},
									{
										"Name": "NoncurrentAssetsLeaseholdImprovements",
										"Description": "Improvements on a leased asset that increase the value of the asset.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsLeaseholdImprovements"
										}
									},
									{
										"Name": "NoncurrentAssetsPatents",
										"Description": "The value of patents held.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsPatents"
										}
									},
									{
										"Name": "NoncurrentAssetsCopyrights",
										"Description": "The value of copyrights held.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsCopyrights"
										}
									},
									{
										"Name": "NoncurrentAssetsGoodwill",
										"Description": "The value of goodwill held.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsGoodwill"
										}
									},
									{
										"Name": "NoncurrentAssetsOtherAssetsAmount",
										"Description": "Other assets can include any number of noncurrent items such as property for sale, start-up costs, advance payments etc.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsOtherAssetsAmount"
										}
									},
									{
										"Name": "NoncurrentAssetsTotalAmount",
										"Description": "The total amount of non-current assets recorded.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentAssetsTotalAmount"
										}
									},
									{
										"Name": "TotalAssetsAmount",
										"Description": "The total of all assets - current + noncurrent.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "TotalAssetsAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesAccountsPayableAmount",
										"Description": "AP are short-term obligations due from credit extended by suppliers etc. for the purchase of goods and services.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesAccountsPayableAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesNotesPayableAmount",
										"Description": "Notes payable are short-term obligations in the form of promissory notes to suppliers or similar legal entities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesNotesPayableAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount",
										"Description": "The amount that will be repaid during the current year on long-term debt outstanding such as bonds, mortgages etc.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesAccruedLiabilitiesAmount",
										"Description": "Accrued liabilities result from the recognition of an expense in the accounting records prior to the actual payment of cash.  \n\nThis is a because most corporations use the accrual rather than the cash basis of accounting in which revenue is recognized when it is earned and expenses are recorded when they are incurred regardless of when the cash is received or paid.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesAccruedLiabilitiesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesAccruedSalariesAndWagesAmount",
										"Description": "The total amount of current liabilities assigned to Accrued Salaries And Wages.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesAccruedSalariesAndWagesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesCommissionsAmount",
										"Description": "The total amount of current liabilities assigned to Commissions.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesCommissionsAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesInsuranceAmount",
										"Description": "The total amount of current liabilities assigned to Insurance.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesInsuranceAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesInterestAmount",
										"Description": "The total amount of current liabilities assigned to Interest.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesInterestAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesPropertyTaxesAmount",
										"Description": "The total amount of current liabilities assigned to Property Taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesPropertyTaxesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesPayrollTaxesAmount",
										"Description": "The total amount of current liabilities assigned to Payroll Taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesPayrollTaxesAmount"
										}
									},
									{
										"Name": "NoncurrentLiabilitiesContingentLiabilitiesAmount",
										"Description": "Potential liabilities arising from past events - that a potential liability exists in the future.\n\nEx:\n- Tax assessments\n- Product warranties\n- Pending lawsuits\n- Litigation",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentLiabilitiesContingentLiabilitiesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesSalesTaxesAmount",
										"Description": "The total amount of current liabilities assigned to Sales Taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesSalesTaxesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesIncomeTaxesAmount",
										"Description": "The total amount of current liabilities assigned to Income Taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesIncomeTaxesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesPensionsAmount",
										"Description": "The total amount of current liabilities assigned to Pensions.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesPensionsAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesRoyaltiesAmount",
										"Description": "The total amount of current liabilities assigned to Royalties.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesRoyaltiesAmount"
										}
									},
									{
										"Name": "CurrentLiabilitiesTotalAmount",
										"Description": "The total amount of current liabilities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "CurrentLiabilitiesTotalAmount"
										}
									},
									{
										"Name": "NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount",
										"Description": "Deferred federal taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount"
										}
									},
									{
										"Name": "NoncurrentLiabilitiesBondsAmount",
										"Description": "Bonds that may be sold to the investing public.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentLiabilitiesBondsAmount"
										}
									},
									{
										"Name": "NoncurrentLiabilitiesLongTermDebtAmount",
										"Description": "Deferred long term debt.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentLiabilitiesLongTermDebtAmount"
										}
									},
									{
										"Name": "NoncurrentLiabilitiesTotalAmount",
										"Description": "The total amount of noncurrent liabilities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "NoncurrentLiabilitiesTotalAmount"
										}
									},
									{
										"Name": "TotalLiabilitiesAmount",
										"Description": "The total amount of liabilities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "TotalLiabilitiesAmount"
										}
									},
									{
										"Name": "StockholdersEquityCommonStockAmount",
										"Description": "Common stockholders have voting rights but do not receive a fixed return.    Dividends are declared by the company at the discretion of the board of directors.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "StockholdersEquityCommonStockAmount"
										}
									},
									{
										"Name": "StockholdersEquityAdditionalPaidInCapitalAmount",
										"Description": "The amount by which the original price of the stock shares exceed par value.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "StockholdersEquityAdditionalPaidInCapitalAmount"
										}
									},
									{
										"Name": "StockholdersEquityRetainedEarningsAmount",
										"Description": "Retained earnings is the sum of the company has earned since its inception minus any payments made to shareholders in the form of cash or stock dividends.\n\nRetained earnings are funds a company has elected to reinvest in the operations of the business rather than pay out to stockholders in dividends.   \n\nIt is a measure of all undistributed earnings.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "StockholdersEquityRetainedEarningsAmount"
										}
									},
									{
										"Name": "StockholdersEquityTotalAmount",
										"Description": "The total amount of stockholders equity.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "StockholdersEquityTotalAmount"
										}
									},
									{
										"Name": "TotalLiabilitiesPlusStockholdersEquityAmount",
										"Description": "The total of all liabilities plus stockholders equity.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "TotalLiabilitiesPlusStockholdersEquityAmount"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 3,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BalanceSheet.cdm.json/BalanceSheet",
											"Name": "IsoCurrencyCode"
										}
									}
								],
								"ColumnSetEntityName": "6cc74f8d-4370-4c0f-8eb0-d97aa4c47a42",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/BalanceSheet",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/BalanceSheet",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"LegalEntityId\"},\"FinancialStatementId\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"FinancialStatementId\"},\"PeriodStartDate\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"PeriodEndDate\"},\"CurrentAssetsCashAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsCashAmount\"},\"CurrentAssetsNotesReceivableAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsNotesReceivableAmount\"},\"CurrentAssetsInventoriesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsInventoriesAmount\"},\"CurrentAssetsPrepaidExpensesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsPrepaidExpensesAmount\"},\"CurrentAssetsMarketableSecuritiesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsMarketableSecuritiesAmount\"},\"CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount\"},\"CurrentAssetsTotalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsTotalAmount\"},\"NoncurrentAssetsPropertyPlantAndEquipmentLandAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLandAmount\"},\"NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount\"},\"NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount\"},\"NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount\"},\"NoncurrentAssetsMortgagesPayableAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsMortgagesPayableAmount\"},\"NoncurrentAssetsLeaseholds\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsLeaseholds\"},\"NoncurrentAssetsLeaseholdImprovements\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsLeaseholdImprovements\"},\"NoncurrentAssetsPatents\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPatents\"},\"NoncurrentAssetsCopyrights\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsCopyrights\"},\"NoncurrentAssetsGoodwill\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsGoodwill\"},\"NoncurrentAssetsOtherAssetsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsOtherAssetsAmount\"},\"NoncurrentAssetsTotalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsTotalAmount\"},\"TotalAssetsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalAssetsAmount\"},\"CurrentLiabilitiesAccountsPayableAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccountsPayableAmount\"},\"CurrentLiabilitiesNotesPayableAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesNotesPayableAmount\"},\"CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount\"},\"CurrentLiabilitiesAccruedLiabilitiesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccruedLiabilitiesAmount\"},\"CurrentLiabilitiesAccruedSalariesAndWagesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccruedSalariesAndWagesAmount\"},\"CurrentLiabilitiesCommissionsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesCommissionsAmount\"},\"CurrentLiabilitiesInsuranceAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesInsuranceAmount\"},\"CurrentLiabilitiesInterestAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesInterestAmount\"},\"CurrentLiabilitiesPropertyTaxesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPropertyTaxesAmount\"},\"CurrentLiabilitiesPayrollTaxesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPayrollTaxesAmount\"},\"NoncurrentLiabilitiesContingentLiabilitiesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesContingentLiabilitiesAmount\"},\"CurrentLiabilitiesSalesTaxesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesSalesTaxesAmount\"},\"CurrentLiabilitiesIncomeTaxesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesIncomeTaxesAmount\"},\"CurrentLiabilitiesPensionsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPensionsAmount\"},\"CurrentLiabilitiesRoyaltiesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesRoyaltiesAmount\"},\"CurrentLiabilitiesTotalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesTotalAmount\"},\"NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount\"},\"NoncurrentLiabilitiesBondsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesBondsAmount\"},\"NoncurrentLiabilitiesLongTermDebtAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesLongTermDebtAmount\"},\"NoncurrentLiabilitiesTotalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesTotalAmount\"},\"TotalLiabilitiesAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalLiabilitiesAmount\"},\"StockholdersEquityCommonStockAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityCommonStockAmount\"},\"StockholdersEquityAdditionalPaidInCapitalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityAdditionalPaidInCapitalAmount\"},\"StockholdersEquityRetainedEarningsAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityRetainedEarningsAmount\"},\"StockholdersEquityTotalAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityTotalAmount\"},\"TotalLiabilitiesPlusStockholdersEquityAmount\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalLiabilitiesPlusStockholdersEquityAmount\"},\"IsoCurrencyCode\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"IsoCurrencyCode\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"BalanceSheet\",\"path\":\"BalanceSheet.cdm.json/BalanceSheet\"},\"description\":\"The Balance Sheet is a 'snapshot' of the legal entity's financial position as of a single time.\\n\\nThe Balance Sheet is a financial statement that reports the assets, liabilities and equity of a legal entity as of a date or point in time.    Assets are listed on the left and liabilities and equity on the right. \\n\\nSince the assets and liabilities position of the entity may change every day there must be a reported date to identify the exact point in time in which the information is valid.\\n\\nThe Balance Sheet is considered to be the financial position of the legal entity as of the date on the statement.\\n\\nThe basic equation that is the foundation of the balance sheet is:\\n\\nAssets = Liabilities + Equity\\n\\nEach transaction causes at least two changes on the balance sheet.\\n\\nThe following is the representative 'template' of a simple Balance Sheet that can easily be customized for the target entity.\",\"primaryKey\":[\"LegalEntityId\",\"FinancialStatementId\",\"PeriodStartDate\",\"PeriodEndDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"FinancialStatementId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Financial Statement.\",\"isNullable\":false,\"name\":\"FinancialStatementId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsCashAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash in any form - such as waiting to be deposited, in bank accounts, checking accounts.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsCashAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsNotesReceivableAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Written promises to receive stated sums of money at future dates, classified as current (if due within 12 months) or non-current (if due after 12 months) of the balance sheet date.\\n\\nRead more: http://www.businessdictionary.com/definition/notes-receivable.html#ixzz17ie7v8jz\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsNotesReceivableAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsInventoriesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Inventories are items held for sale or used in the manufacture of products that will be sold.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsInventoriesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsPrepaidExpensesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Expenses such as insurance, rent, property taxes that are paid in advance.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsPrepaidExpensesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsMarketableSecuritiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash substitutes that is temporarily invested to earn a return.   These are short-term maturity instruments of less than one year maturity.\\n\\nThey should be relatively 'riskless' securities or investments.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsMarketableSecuritiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Accounts receivables are customer balances on outstanding credit sales that are reported at their net realizable value - minus any allowance for doubtful accounts.\\n\\nDoubtful accounts are those the management judges to be uncollectible during the account period.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentAssetsTotalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current assets.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentAssetsTotalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLandAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\\n\\nThey are considered tangible because they have physical substance.\\n\\nLand as a fixed asset refers to property used in the business.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLandAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\\n\\nThey are considered tangible because they have physical substance.\\n\\nBuildings include buildings and structures owned by the company.   Leasehold improvements are additions or improvements made to leased structures.    They are amortized by the lessee over the economic life of the improvement or the life of the lease whichever is shorter.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\\n\\nThey are considered tangible because they have physical substance.\\n\\nEquipment represents the original cost including delivery and installation of the machinery and equipment used in business operations.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Property, Plant And Equipment represent a company's fixed assets that are not consumed in the annual business operations and provide economic benefits for more than one year.\\n\\nThey are considered tangible because they have physical substance.\\n\\nThis is the accumulated depreciation and amortization for property, plant and equipment.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsMortgagesPayableAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The mortgages held by the company.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsMortgagesPayableAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsLeaseholds\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Leasehold is a form of property tenure where one party buys the right to occupy land or a building for a given length of time. A lease is a legal estate leasehold that can be bought and sold on the open market and differs from a tenancy where a property is let on a periodic basis such as weekly or monthly\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsLeaseholds\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsLeaseholdImprovements\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Improvements on a leased asset that increase the value of the asset.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsLeaseholdImprovements\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsPatents\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The value of patents held.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsPatents\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsCopyrights\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The value of copyrights held.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsCopyrights\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsGoodwill\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The value of goodwill held.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsGoodwill\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsOtherAssetsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Other assets can include any number of noncurrent items such as property for sale, start-up costs, advance payments etc.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsOtherAssetsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentAssetsTotalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of non-current assets recorded.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentAssetsTotalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalAssetsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total of all assets - current + noncurrent.\",\"isNullable\":true,\"scale\":2,\"name\":\"TotalAssetsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccountsPayableAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"AP are short-term obligations due from credit extended by suppliers etc. for the purchase of goods and services.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesAccountsPayableAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesNotesPayableAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Notes payable are short-term obligations in the form of promissory notes to suppliers or similar legal entities.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesNotesPayableAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount that will be repaid during the current year on long-term debt outstanding such as bonds, mortgages etc.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccruedLiabilitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Accrued liabilities result from the recognition of an expense in the accounting records prior to the actual payment of cash.  \\n\\nThis is a because most corporations use the accrual rather than the cash basis of accounting in which revenue is recognized when it is earned and expenses are recorded when they are incurred regardless of when the cash is received or paid.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesAccruedLiabilitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesAccruedSalariesAndWagesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Accrued Salaries And Wages.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesAccruedSalariesAndWagesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesCommissionsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Commissions.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesCommissionsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesInsuranceAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Insurance.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesInsuranceAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesInterestAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Interest.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesInterestAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPropertyTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Property Taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesPropertyTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPayrollTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Payroll Taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesPayrollTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesContingentLiabilitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Potential liabilities arising from past events - that a potential liability exists in the future.\\n\\nEx:\\n- Tax assessments\\n- Product warranties\\n- Pending lawsuits\\n- Litigation\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentLiabilitiesContingentLiabilitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesSalesTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Sales Taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesSalesTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesIncomeTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Income Taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesIncomeTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesPensionsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Pensions.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesPensionsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesRoyaltiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities assigned to Royalties.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesRoyaltiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"CurrentLiabilitiesTotalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of current liabilities.\",\"isNullable\":true,\"scale\":2,\"name\":\"CurrentLiabilitiesTotalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Deferred federal taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesBondsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Bonds that may be sold to the investing public.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentLiabilitiesBondsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesLongTermDebtAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Deferred long term debt.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentLiabilitiesLongTermDebtAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"NoncurrentLiabilitiesTotalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of noncurrent liabilities.\",\"isNullable\":true,\"scale\":2,\"name\":\"NoncurrentLiabilitiesTotalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalLiabilitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of liabilities.\",\"isNullable\":true,\"scale\":2,\"name\":\"TotalLiabilitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityCommonStockAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Common stockholders have voting rights but do not receive a fixed return.    Dividends are declared by the company at the discretion of the board of directors.\",\"isNullable\":true,\"scale\":2,\"name\":\"StockholdersEquityCommonStockAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityAdditionalPaidInCapitalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount by which the original price of the stock shares exceed par value.\",\"isNullable\":true,\"scale\":2,\"name\":\"StockholdersEquityAdditionalPaidInCapitalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityRetainedEarningsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Retained earnings is the sum of the company has earned since its inception minus any payments made to shareholders in the form of cash or stock dividends.\\n\\nRetained earnings are funds a company has elected to reinvest in the operations of the business rather than pay out to stockholders in dividends.   \\n\\nIt is a measure of all undistributed earnings.\",\"isNullable\":true,\"scale\":2,\"name\":\"StockholdersEquityRetainedEarningsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"StockholdersEquityTotalAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total amount of stockholders equity.\",\"isNullable\":true,\"scale\":2,\"name\":\"StockholdersEquityTotalAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"TotalLiabilitiesPlusStockholdersEquityAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The total of all liabilities plus stockholders equity.\",\"isNullable\":true,\"scale\":2,\"name\":\"TotalLiabilitiesPlusStockholdersEquityAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BalanceSheet.cdm.json/BalanceSheet\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":true,\"name\":\"IsoCurrencyCode\"}]}}}",
								"Description": "The Balance Sheet is a 'snapshot' of the legal entity's financial position as of a single time.\n\nThe Balance Sheet is a financial statement that reports the assets, liabilities and equity of a legal entity as of a date or point in time.    Assets are listed on the left and liabilities and equity on the right. \n\nSince the assets and liabilities position of the entity may change every day there must be a reported date to identify the exact point in time in which the information is valid.\n\nThe Balance Sheet is considered to be the financial position of the legal entity as of the date on the statement.\n\nThe basic equation that is the foundation of the balance sheet is:\n\nAssets = Liabilities + Equity\n\nEach transaction causes at least two changes on the balance sheet.\n\nThe following is the representative 'template' of a simple Balance Sheet that can easily be customized for the target entity.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,FinancialStatementId,PeriodStartDate,PeriodEndDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "2",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FinancialStatementId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CurrentAssetsCashAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsNotesReceivableAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsInventoriesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsPrepaidExpensesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsMarketableSecuritiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsAccountsReceivablesLessAllowanceForDoubtfulAccountsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentAssetsTotalAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLandAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentBuildingsAndLeaseholdImprovementsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentEquipmentAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsPropertyPlantAndEquipmentLessAccumulatedDepreciationAndAmortizationAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsMortgagesPayableAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsLeaseholds\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsLeaseholdImprovements\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsPatents\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsCopyrights\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsGoodwill\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsOtherAssetsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentAssetsTotalAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"TotalAssetsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesAccountsPayableAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesNotesPayableAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesCurrentMaturitiesOfLongTermDebtAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesAccruedLiabilitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesAccruedSalariesAndWagesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesCommissionsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesInsuranceAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesInterestAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesPropertyTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesPayrollTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentLiabilitiesContingentLiabilitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesSalesTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesIncomeTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesPensionsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesRoyaltiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrentLiabilitiesTotalAmount\",\"type\":\"",
								"spark.sql.sources.schema.part.1": "decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentLiabilitiesDeferredFederalIncomeTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentLiabilitiesBondsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentLiabilitiesLongTermDebtAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NoncurrentLiabilitiesTotalAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"TotalLiabilitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StockholdersEquityCommonStockAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StockholdersEquityAdditionalPaidInCapitalAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StockholdersEquityRetainedEarningsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StockholdersEquityTotalAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"TotalLiabilitiesPlusStockholdersEquityAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IsoCurrencyCode\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "b8527223-423a-4460-ad89-7db9f380e726",
							"Description": "The Balance Sheet is a 'snapshot' of the legal entity's financial position as of a single time.\n\nThe Balance Sheet is a financial statement that reports the assets, liabilities and equity of a legal entity as of a date or point in time.    Assets are listed on the left and liabilities and equity on the right. \n\nSince the assets and liabilities position of the entity may change every day there must be a reported date to identify the exact point in time in which the information is valid.\n\nThe Balance Sheet is considered to be the financial position of the legal entity as of the date on the statement.\n\nThe basic equation that is the foundation of the balance sheet is:\n\nAssets = Liabilities + Equity\n\nEach transaction causes at least two changes on the balance sheet.\n\nThe following is the representative 'template' of a simple Balance Sheet that can easily be customized for the target entity."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CashFlowStatement",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "FinancialStatementId",
										"Description": "The unique identifier of a Financial Statement.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "FinancialStatementId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CashReceiptsFromCustomersAmount",
										"Description": "Cash received from customers for services and or goods purchased.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromCustomersAmount"
										}
									},
									{
										"Name": "CashReceiptsFromInvestmentsAmount",
										"Description": "Cash received from investments.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromInvestmentsAmount"
										}
									},
									{
										"Name": "OtherCashReceiptsAmount",
										"Description": "Other miscellaneous cash receipts amounts.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "OtherCashReceiptsAmount"
										}
									},
									{
										"Name": "CashPaidForInventoryPurchasesAmount",
										"Description": "Cash paid out for purchase of inventory items.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForInventoryPurchasesAmount"
										}
									},
									{
										"Name": "CashPaidForGeneralOperatingAndAdministrativeExpensesAmount",
										"Description": "Cash paid out to support general operating and administrative expenses.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForGeneralOperatingAndAdministrativeExpensesAmount"
										}
									},
									{
										"Name": "CashPaidForEmployeeEntitlementsAmount",
										"Description": "Cash paid out for employee-related entitlements and obligations.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForEmployeeEntitlementsAmount"
										}
									},
									{
										"Name": "CashPaidForWageExpensesAmount",
										"Description": "Cash paid for wage and salary expenses.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForWageExpensesAmount"
										}
									},
									{
										"Name": "CashPaidForInterestAmount",
										"Description": "Cash paid to support interest-related fees and charges.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForInterestAmount"
										}
									},
									{
										"Name": "CashPaidForIncomeTaxesAmount",
										"Description": "Cash paid for income taxes.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForIncomeTaxesAmount"
										}
									},
									{
										"Name": "DepreciationAmount",
										"Description": "Cash paid to support depreciation charges.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "DepreciationAmount"
										}
									},
									{
										"Name": "NetCashFlowFromOperationsAmount",
										"Description": "The net amount of cash flow from operations.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "NetCashFlowFromOperationsAmount"
										}
									},
									{
										"Name": "CashReceiptsFromSaleOfPropertyEquipmentAmount",
										"Description": "Cash received from the sale of property and equipment.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromSaleOfPropertyEquipmentAmount"
										}
									},
									{
										"Name": "CashReceiptsFromCollectionOfPrincipalOnLoansAmount",
										"Description": "Cash received for the collection loan principal.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromCollectionOfPrincipalOnLoansAmount"
										}
									},
									{
										"Name": "CashReceiptsFromSalesOfInvestmentSecuritiesAmount",
										"Description": "Cash received for the sale of investments.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromSalesOfInvestmentSecuritiesAmount"
										}
									},
									{
										"Name": "CashPaidForPurchaseOfPropertyAndEquipmentAmount",
										"Description": "Cash paid out for the purchase of property and equipment.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForPurchaseOfPropertyAndEquipmentAmount"
										}
									},
									{
										"Name": "CashPaidForMakingLoansToOtherEntitiesAmount",
										"Description": "Cash paid for loans made to other legal entities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForMakingLoansToOtherEntitiesAmount"
										}
									},
									{
										"Name": "CashPaidForPurchaseOfInvestmentSecuritiesAmount",
										"Description": "Cash paid for the purchase of investment securities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForPurchaseOfInvestmentSecuritiesAmount"
										}
									},
									{
										"Name": "SalesOnMaturityOfInvestmentsAmount",
										"Description": "Sales made on matured investments.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "SalesOnMaturityOfInvestmentsAmount"
										}
									},
									{
										"Name": "DispositionOfBusinessesAmount",
										"Description": "Cash received for the disposition of businesses.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "DispositionOfBusinessesAmount"
										}
									},
									{
										"Name": "OtherInvestingActivitiesAmount",
										"Description": "Other and miscellaneous investment activities funds received.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "OtherInvestingActivitiesAmount"
										}
									},
									{
										"Name": "NetCashFlowFromInvestmentActivitiesAmount",
										"Description": "Net positive/negative cash flow from investment activities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "NetCashFlowFromInvestmentActivitiesAmount"
										}
									},
									{
										"Name": "CashReceiptsFromIssuanceOfStockAmount",
										"Description": "Cash received for the issue of stock/treasury stock.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromIssuanceOfStockAmount"
										}
									},
									{
										"Name": "CashReceiptsFromBorrowingAmount",
										"Description": "Cash received from borrowings.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashReceiptsFromBorrowingAmount"
										}
									},
									{
										"Name": "CashPaidForRepurchaseOfStockAmount",
										"Description": "Cash paid for the repurchase of stock/treasury stock.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForRepurchaseOfStockAmount"
										}
									},
									{
										"Name": "CashPaidForRepaymentOfLoansAmount",
										"Description": "Cash paid upon the repayment of loans.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForRepaymentOfLoansAmount"
										}
									},
									{
										"Name": "CashPaidForDividendsAmount",
										"Description": "Cash paid for dividends.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashPaidForDividendsAmount"
										}
									},
									{
										"Name": "IssuanceOfLongTermDebtAmount",
										"Description": "Funds applied to the issue of long-term debt.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "IssuanceOfLongTermDebtAmount"
										}
									},
									{
										"Name": "IncreaseDecreaseInShortTermBorrowingAmount",
										"Description": "The increase/decrease of short-term borrowings amount.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "IncreaseDecreaseInShortTermBorrowingAmount"
										}
									},
									{
										"Name": "ShortTermBankLoansAmount",
										"Description": "The amount of short-term bank amounts procured (less than 1 year).",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "ShortTermBankLoansAmount"
										}
									},
									{
										"Name": "LongTermBankLoansAmount",
										"Description": "The amount of long-term bank amounts procured (greater than 1 year).",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "LongTermBankLoansAmount"
										}
									},
									{
										"Name": "StockholderLoansAmount",
										"Description": "The amount of loans to stockholders.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "StockholderLoansAmount"
										}
									},
									{
										"Name": "SubordinatedDebtAmount",
										"Description": "The amount of loans (or security) that ranks below other loans (or securities) with regard to claims on assets or earnings.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "SubordinatedDebtAmount"
										}
									},
									{
										"Name": "DividendsDrawsAmount",
										"Description": "The amount of dividends and draws taken during the period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "DividendsDrawsAmount"
										}
									},
									{
										"Name": "NotesPayableAmount",
										"Description": "The amount of notes payable for the period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "NotesPayableAmount"
										}
									},
									{
										"Name": "NetCashFlowFromFinancingActivitiesAmount",
										"Description": "The net positive/negative cash flow from financing activities.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "NetCashFlowFromFinancingActivitiesAmount"
										}
									},
									{
										"Name": "CashAtTheBeginningOfReportingPeriodAmount",
										"Description": "The amount of cash at the beginning of period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashAtTheBeginningOfReportingPeriodAmount"
										}
									},
									{
										"Name": "CashAtTheEndOfReportingPeriodAmount",
										"Description": "The amount of cash at the end of period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashAtTheEndOfReportingPeriodAmount"
										}
									},
									{
										"Name": "NetIncreaseDecreaseInCashAmount",
										"Description": "The net increase/decrease in cash for the period.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "NetIncreaseDecreaseInCashAmount"
										}
									},
									{
										"Name": "CashFlowStatementPreparationMethodId",
										"Description": "The unique identifier of a Cash Flow Statement Preparation Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "CashFlowStatementPreparationMethodId"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 3,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatement.cdm.json/CashFlowStatement",
											"Name": "IsoCurrencyCode"
										}
									}
								],
								"ColumnSetEntityName": "11a8c3e6-097b-444f-9226-cf5163c4903f",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CashFlowStatement",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CashFlowStatement",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"LegalEntityId\"},\"FinancialStatementId\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"FinancialStatementId\"},\"PeriodStartDate\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"PeriodEndDate\"},\"CashReceiptsFromCustomersAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromCustomersAmount\"},\"CashReceiptsFromInvestmentsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromInvestmentsAmount\"},\"OtherCashReceiptsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"OtherCashReceiptsAmount\"},\"CashPaidForInventoryPurchasesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForInventoryPurchasesAmount\"},\"CashPaidForGeneralOperatingAndAdministrativeExpensesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForGeneralOperatingAndAdministrativeExpensesAmount\"},\"CashPaidForEmployeeEntitlementsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForEmployeeEntitlementsAmount\"},\"CashPaidForWageExpensesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForWageExpensesAmount\"},\"CashPaidForInterestAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForInterestAmount\"},\"CashPaidForIncomeTaxesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForIncomeTaxesAmount\"},\"DepreciationAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DepreciationAmount\"},\"NetCashFlowFromOperationsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromOperationsAmount\"},\"CashReceiptsFromSaleOfPropertyEquipmentAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromSaleOfPropertyEquipmentAmount\"},\"CashReceiptsFromCollectionOfPrincipalOnLoansAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromCollectionOfPrincipalOnLoansAmount\"},\"CashReceiptsFromSalesOfInvestmentSecuritiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromSalesOfInvestmentSecuritiesAmount\"},\"CashPaidForPurchaseOfPropertyAndEquipmentAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForPurchaseOfPropertyAndEquipmentAmount\"},\"CashPaidForMakingLoansToOtherEntitiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForMakingLoansToOtherEntitiesAmount\"},\"CashPaidForPurchaseOfInvestmentSecuritiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForPurchaseOfInvestmentSecuritiesAmount\"},\"SalesOnMaturityOfInvestmentsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"SalesOnMaturityOfInvestmentsAmount\"},\"DispositionOfBusinessesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DispositionOfBusinessesAmount\"},\"OtherInvestingActivitiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"OtherInvestingActivitiesAmount\"},\"NetCashFlowFromInvestmentActivitiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromInvestmentActivitiesAmount\"},\"CashReceiptsFromIssuanceOfStockAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromIssuanceOfStockAmount\"},\"CashReceiptsFromBorrowingAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromBorrowingAmount\"},\"CashPaidForRepurchaseOfStockAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForRepurchaseOfStockAmount\"},\"CashPaidForRepaymentOfLoansAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForRepaymentOfLoansAmount\"},\"CashPaidForDividendsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForDividendsAmount\"},\"IssuanceOfLongTermDebtAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IssuanceOfLongTermDebtAmount\"},\"IncreaseDecreaseInShortTermBorrowingAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IncreaseDecreaseInShortTermBorrowingAmount\"},\"ShortTermBankLoansAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"ShortTermBankLoansAmount\"},\"LongTermBankLoansAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"LongTermBankLoansAmount\"},\"StockholderLoansAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"StockholderLoansAmount\"},\"SubordinatedDebtAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"SubordinatedDebtAmount\"},\"DividendsDrawsAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DividendsDrawsAmount\"},\"NotesPayableAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NotesPayableAmount\"},\"NetCashFlowFromFinancingActivitiesAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromFinancingActivitiesAmount\"},\"CashAtTheBeginningOfReportingPeriodAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashAtTheBeginningOfReportingPeriodAmount\"},\"CashAtTheEndOfReportingPeriodAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashAtTheEndOfReportingPeriodAmount\"},\"NetIncreaseDecreaseInCashAmount\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetIncreaseDecreaseInCashAmount\"},\"CashFlowStatementPreparationMethodId\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashFlowStatementPreparationMethodId\"},\"IsoCurrencyCode\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IsoCurrencyCode\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CashFlowStatement\",\"path\":\"CashFlowStatement.cdm.json/CashFlowStatement\"},\"description\":\"The Cash Flow Statement reports inflows and outflows as cash - focusing upon profitability.\\n\\nCash flow from operating activities represents cash generated internally.   Investing and financing activities represents cash from external sources.\\n\\nThe cash flow statement is a reordering of information from the balance sheet.   The balance sheet shows account balances at the end of an accounting period, whereas the statement of cash flows shows 'changes' in the same account balances between accounting periods. \\n\\nIt is a statement of 'flows' because it shows changes over time rather than the absolute dollar amount of the accounts at a point in time as with the balance sheet.\\n\\nThe statement of cash flows is prepared by calculating the changes in all of the balance sheet accounts and then listing the accounts as inflows/outflows by operating, financing and investing activities.\\n\\nThe inflows less the outflows balance to and explain the change in the cash position.\\n\\nThe Cash Flow Statement helps management estimate future cash requirements.\\n\\nThe Cash Flow Statement has 3 sections:   \\n\\n(1)  Cash Flow From Operating Activities\\n(2)  Cash Flow From Investing Activities\\n(3)  Cash Flow From Financing Activities\\n\\nThe example below shows the Direct Method of Cash Flow Statement Preparation in which debits and credits are summarized directly to the Cash account.\",\"primaryKey\":[\"LegalEntityId\",\"FinancialStatementId\",\"PeriodStartDate\",\"PeriodEndDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"FinancialStatementId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Financial Statement.\",\"isNullable\":false,\"name\":\"FinancialStatementId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromCustomersAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received from customers for services and or goods purchased.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromCustomersAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromInvestmentsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received from investments.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromInvestmentsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"OtherCashReceiptsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Other miscellaneous cash receipts amounts.\",\"isNullable\":true,\"scale\":2,\"name\":\"OtherCashReceiptsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForInventoryPurchasesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid out for purchase of inventory items.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForInventoryPurchasesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForGeneralOperatingAndAdministrativeExpensesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid out to support general operating and administrative expenses.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForGeneralOperatingAndAdministrativeExpensesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForEmployeeEntitlementsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid out for employee-related entitlements and obligations.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForEmployeeEntitlementsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForWageExpensesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for wage and salary expenses.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForWageExpensesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForInterestAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid to support interest-related fees and charges.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForInterestAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForIncomeTaxesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for income taxes.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForIncomeTaxesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DepreciationAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid to support depreciation charges.\",\"isNullable\":true,\"scale\":2,\"name\":\"DepreciationAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromOperationsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The net amount of cash flow from operations.\",\"isNullable\":true,\"scale\":2,\"name\":\"NetCashFlowFromOperationsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromSaleOfPropertyEquipmentAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received from the sale of property and equipment.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromSaleOfPropertyEquipmentAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromCollectionOfPrincipalOnLoansAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received for the collection loan principal.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromCollectionOfPrincipalOnLoansAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromSalesOfInvestmentSecuritiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received for the sale of investments.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromSalesOfInvestmentSecuritiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForPurchaseOfPropertyAndEquipmentAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid out for the purchase of property and equipment.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForPurchaseOfPropertyAndEquipmentAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForMakingLoansToOtherEntitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for loans made to other legal entities.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForMakingLoansToOtherEntitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForPurchaseOfInvestmentSecuritiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for the purchase of investment securities.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForPurchaseOfInvestmentSecuritiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"SalesOnMaturityOfInvestmentsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Sales made on matured investments.\",\"isNullable\":true,\"scale\":2,\"name\":\"SalesOnMaturityOfInvestmentsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DispositionOfBusinessesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received for the disposition of businesses.\",\"isNullable\":true,\"scale\":2,\"name\":\"DispositionOfBusinessesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"OtherInvestingActivitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Other and miscellaneous investment activities funds received.\",\"isNullable\":true,\"scale\":2,\"name\":\"OtherInvestingActivitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromInvestmentActivitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Net positive/negative cash flow from investment activities.\",\"isNullable\":true,\"scale\":2,\"name\":\"NetCashFlowFromInvestmentActivitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromIssuanceOfStockAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received for the issue of stock/treasury stock.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromIssuanceOfStockAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashReceiptsFromBorrowingAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash received from borrowings.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashReceiptsFromBorrowingAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForRepurchaseOfStockAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for the repurchase of stock/treasury stock.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForRepurchaseOfStockAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForRepaymentOfLoansAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid upon the repayment of loans.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForRepaymentOfLoansAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashPaidForDividendsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Cash paid for dividends.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashPaidForDividendsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IssuanceOfLongTermDebtAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"Funds applied to the issue of long-term debt.\",\"isNullable\":true,\"scale\":2,\"name\":\"IssuanceOfLongTermDebtAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IncreaseDecreaseInShortTermBorrowingAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The increase/decrease of short-term borrowings amount.\",\"isNullable\":true,\"scale\":2,\"name\":\"IncreaseDecreaseInShortTermBorrowingAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"ShortTermBankLoansAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of short-term bank amounts procured (less than 1 year).\",\"isNullable\":true,\"scale\":2,\"name\":\"ShortTermBankLoansAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"LongTermBankLoansAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of long-term bank amounts procured (greater than 1 year).\",\"isNullable\":true,\"scale\":2,\"name\":\"LongTermBankLoansAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"StockholderLoansAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of loans to stockholders.\",\"isNullable\":true,\"scale\":2,\"name\":\"StockholderLoansAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"SubordinatedDebtAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of loans (or security) that ranks below other loans (or securities) with regard to claims on assets or earnings.\",\"isNullable\":true,\"scale\":2,\"name\":\"SubordinatedDebtAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"DividendsDrawsAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of dividends and draws taken during the period.\",\"isNullable\":true,\"scale\":2,\"name\":\"DividendsDrawsAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NotesPayableAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of notes payable for the period.\",\"isNullable\":true,\"scale\":2,\"name\":\"NotesPayableAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetCashFlowFromFinancingActivitiesAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The net positive/negative cash flow from financing activities.\",\"isNullable\":true,\"scale\":2,\"name\":\"NetCashFlowFromFinancingActivitiesAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashAtTheBeginningOfReportingPeriodAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of cash at the beginning of period.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashAtTheBeginningOfReportingPeriodAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashAtTheEndOfReportingPeriodAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of cash at the end of period.\",\"isNullable\":true,\"scale\":2,\"name\":\"CashAtTheEndOfReportingPeriodAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"NetIncreaseDecreaseInCashAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The net increase/decrease in cash for the period.\",\"isNullable\":true,\"scale\":2,\"name\":\"NetIncreaseDecreaseInCashAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"CashFlowStatementPreparationMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cash Flow Statement Preparation Method.\",\"isNullable\":true,\"name\":\"CashFlowStatementPreparationMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatement.cdm.json/CashFlowStatement\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":true,\"name\":\"IsoCurrencyCode\"}]}}}",
								"Description": "The Cash Flow Statement reports inflows and outflows as cash - focusing upon profitability.\n\nCash flow from operating activities represents cash generated internally.   Investing and financing activities represents cash from external sources.\n\nThe cash flow statement is a reordering of information from the balance sheet.   The balance sheet shows account balances at the end of an accounting period, whereas the statement of cash flows shows 'changes' in the same account balances between accounting periods. \n\nIt is a statement of 'flows' because it shows changes over time rather than the absolute dollar amount of the accounts at a point in time as with the balance sheet.\n\nThe statement of cash flows is prepared by calculating the changes in all of the balance sheet accounts and then listing the accounts as inflows/outflows by operating, financing and investing activities.\n\nThe inflows less the outflows balance to and explain the change in the cash position.\n\nThe Cash Flow Statement helps management estimate future cash requirements.\n\nThe Cash Flow Statement has 3 sections:   \n\n(1)  Cash Flow From Operating Activities\n(2)  Cash Flow From Investing Activities\n(3)  Cash Flow From Financing Activities\n\nThe example below shows the Direct Method of Cash Flow Statement Preparation in which debits and credits are summarized directly to the Cash account.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,FinancialStatementId,PeriodStartDate,PeriodEndDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "2",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FinancialStatementId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CashReceiptsFromCustomersAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromInvestmentsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"OtherCashReceiptsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForInventoryPurchasesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForGeneralOperatingAndAdministrativeExpensesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForEmployeeEntitlementsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForWageExpensesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForInterestAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForIncomeTaxesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DepreciationAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NetCashFlowFromOperationsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromSaleOfPropertyEquipmentAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromCollectionOfPrincipalOnLoansAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromSalesOfInvestmentSecuritiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForPurchaseOfPropertyAndEquipmentAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForMakingLoansToOtherEntitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForPurchaseOfInvestmentSecuritiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SalesOnMaturityOfInvestmentsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DispositionOfBusinessesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"OtherInvestingActivitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NetCashFlowFromInvestmentActivitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromIssuanceOfStockAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashReceiptsFromBorrowingAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForRepurchaseOfStockAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForRepaymentOfLoansAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashPaidForDividendsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IssuanceOfLongTermDebtAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IncreaseDecreaseInShortTermBorrowingAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ShortTermBankLoansAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"LongTermBankLoansAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StockholderLoansAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SubordinatedDebtAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DividendsDrawsAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NotesPayableAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NetCashFlowFromFinancingActivitiesAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashAtTheBeginningOfReportingPeriodAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashAtTheEndOfReportingPeriodAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NetIncreaseDecreaseInCash",
								"spark.sql.sources.schema.part.1": "Amount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashFlowStatementPreparationMethodId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IsoCurrencyCode\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "9218599b-90de-4f9f-b2c5-2f792ecc9ce4",
							"Description": "The Cash Flow Statement reports inflows and outflows as cash - focusing upon profitability.\n\nCash flow from operating activities represents cash generated internally.   Investing and financing activities represents cash from external sources.\n\nThe cash flow statement is a reordering of information from the balance sheet.   The balance sheet shows account balances at the end of an accounting period, whereas the statement of cash flows shows 'changes' in the same account balances between accounting periods. \n\nIt is a statement of 'flows' because it shows changes over time rather than the absolute dollar amount of the accounts at a point in time as with the balance sheet.\n\nThe statement of cash flows is prepared by calculating the changes in all of the balance sheet accounts and then listing the accounts as inflows/outflows by operating, financing and investing activities.\n\nThe inflows less the outflows balance to and explain the change in the cash position.\n\nThe Cash Flow Statement helps management estimate future cash requirements.\n\nThe Cash Flow Statement has 3 sections:   \n\n(1)  Cash Flow From Operating Activities\n(2)  Cash Flow From Investing Activities\n(3)  Cash Flow From Financing Activities\n\nThe example below shows the Direct Method of Cash Flow Statement Preparation in which debits and credits are summarized directly to the Cash account."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AccountingFramework",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "AccountingFrameworkId",
										"Description": "The unique identifier of an Accounting Framework.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFramework.cdm.json/AccountingFramework",
											"Name": "AccountingFrameworkId"
										}
									},
									{
										"Name": "AccountingFrameworkName",
										"Description": "The name of an Accounting Framework.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFramework.cdm.json/AccountingFramework",
											"Name": "AccountingFrameworkName"
										}
									},
									{
										"Name": "AccountingFrameworkDescription",
										"Description": "The description of an Accounting Framework.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFramework.cdm.json/AccountingFramework",
											"Name": "AccountingFrameworkDescription"
										}
									},
									{
										"Name": "GoverningPartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFramework.cdm.json/AccountingFramework",
											"Name": "GoverningPartyId"
										}
									}
								],
								"ColumnSetEntityName": "47ce38db-3bd6-45df-8ad1-cf8e4590c7fa",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingFramework",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingFramework",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"AccountingFrameworkId\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkId\"},\"AccountingFrameworkName\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkName\"},\"AccountingFrameworkDescription\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkDescription\"},\"GoverningPartyId\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"GoverningPartyId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AccountingFramework\",\"path\":\"AccountingFramework.cdm.json/AccountingFramework\"},\"description\":\"There are many different frameworks of accounting standards in use internationally. Each of these frameworks consists of a set of standards / rules / interpretations. Each accounting framework is controlled by their own governing body.\\n\\nEx:\\nGAAP\\nUS GAAP\\nIFRS\\nFERC\",\"primaryKey\":[\"AccountingFrameworkId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Framework.\",\"isNullable\":false,\"name\":\"AccountingFrameworkId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of an Accounting Framework.\",\"isNullable\":true,\"name\":\"AccountingFrameworkName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"AccountingFrameworkDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of an Accounting Framework.\",\"isNullable\":true,\"name\":\"AccountingFrameworkDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFramework.cdm.json/AccountingFramework\",\"name\":\"GoverningPartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":true,\"name\":\"GoverningPartyId\"}]}}}",
								"Description": "There are many different frameworks of accounting standards in use internationally. Each of these frameworks consists of a set of standards / rules / interpretations. Each accounting framework is controlled by their own governing body.\n\nEx:\nGAAP\nUS GAAP\nIFRS\nFERC",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "AccountingFrameworkId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"AccountingFrameworkId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingFrameworkName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingFrameworkDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GoverningPartyId\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "30576665-c385-40a7-8553-ac1098f7b034",
							"Description": "There are many different frameworks of accounting standards in use internationally. Each of these frameworks consists of a set of standards / rules / interpretations. Each accounting framework is controlled by their own governing body.\n\nEx:\nGAAP\nUS GAAP\nIFRS\nFERC"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AccountingFrameworkStandard",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "AccountingFrameworkId",
										"Description": "The unique identifier of an Accounting Framework.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard",
											"Name": "AccountingFrameworkId"
										}
									},
									{
										"Name": "AccountingFrameworkStandardId",
										"Description": "The unique identifier of an Accounting Framework Standard.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard",
											"Name": "AccountingFrameworkStandardId"
										}
									},
									{
										"Name": "AccountingFrameworkStandardName",
										"Description": "The name of an Accounting Framework Standard.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard",
											"Name": "AccountingFrameworkStandardName"
										}
									},
									{
										"Name": "AccountingFrameworkStandardDescription",
										"Description": "The description of an Accounting Framework Standard.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard",
											"Name": "AccountingFrameworkStandardDescription"
										}
									}
								],
								"ColumnSetEntityName": "4ec7f480-d97f-4bfe-a017-9d2b773945f7",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingFrameworkStandard",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingFrameworkStandard",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"AccountingFrameworkId\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkId\"},\"AccountingFrameworkStandardId\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardId\"},\"AccountingFrameworkStandardName\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardName\"},\"AccountingFrameworkStandardDescription\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AccountingFrameworkStandard\",\"path\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\"},\"description\":\"Each Accounting Framework consists of a set of standards / rules / interpretations. These standards guide the organization in how financial transactions should be reflected in an organization's accounting system and how an organization should prepare their financial reporting.\\n\\nEach Accounting Framework has its own set of standards that must be followed. \\n\\nThe International Financial Reporting Standards (IFRS), one of many different accounting frameworks, is becoming increasingly used throughout the world. For this reason we have included its set of standards as way of an example. The Standards and Interpretations that make up the IFRS include:\\n\\nEx:\\nStandard/ Interpretation    Title\\n- IFRS 1                    First-time Adoption of International Financial Reporting Standards\\n- IFRS 2                    Share-based Payment\\n- IFRS 3                    Business Combinations\\n- IFRS 4                    Insurance Contracts\\n- IFRS 5                    Non-current Assets Held for Sale and Discontinued Operations\\n- IFRS 6                    Exploration for and Evaluation of Mineral Resources\\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has not yet adopted IFRS 9)\\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has adopted IFRS 9)\\n- IFRS 8                    Operating Segments\\n- IFRS 9                    Financial Instruments \\n- IAS 1                     Presentation of Financial Statements\\n- IAS 2                     Inventories\\n- IAS 7                     Statement of Cash Flows\\n- IAS 8                     Accounting Policies, Changes in Accounting Estimates and Errors\\n- IAS 10                    Events after the Reporting Period\\n- IAS 11                    Construction Contracts\\n- IAS 12                    Income Taxes\\n- IAS 16                    Property, Plant and Equipment\\n- IAS 17                    Leases\\n- IAS 18                    Revenue\\n- IAS 19                    Employee Benefits\\n- IAS 20                    Accounting for Government Grants and Disclosure of Government Assistance\\n- IAS 21                    The Effects of Changes in Foreign Exchange Rates\\n- IAS 23                    Borrowing Costs\\n- IAS 24(3)                 Related Party Disclosures\\n- IAS 24(2009)(3)           Related Party Disclosures\\n- IAS 26                    Accounting and Reporting by Retirement Benefit Plans\\n- IAS 27                    Consolidated and Separate Financial Statements \\n- IAS 28                    Investments in Associates\\n- IAS 29                    Financial Reporting in Hyperinflationary Economies\\n- IAS 31                    Interests in Joint Ventures\\n- IAS 32                    Financial Instruments: Presentation\\n- IAS 33                    Earnings Per Share\\n- IAS 34                    Interim Financial Reporting\\n- IAS 36                    Impairment of Assets\\n- IAS 37                    Provisions, Contingent Liabilities and Contingent Assets\\n- IAS 38                    Intangible Assets\\n- IAS 39                    Financial Instruments: Recognition and Measurement\\n- IAS 40                    Investment Property\\n- IAS 41                    Agriculture \\n- IFRIC 1                   Changes in Existing Decommissioning, Restoration and Similar Liabilities\\n- IFRIC 2                   Members' Shares in Co-operative Entities and Similar Instruments \\n- IFRIC 4                   Determining whether an Arrangement contains a Lease\\n- IFRIC 5                   Rights to Interests arising from Decommissioning, Restoration and Environmental Rehabilitation Funds\\n- IFRIC 6                   Liabilities arising from Participating in a Specific Market - Waste Electrical and Electronic Equipment\\n- IFRIC 7                   Applying the Restatement Approach under IAS 29 Financial Reporting in Hyperinflationary Economies\\n- IFRIC 9                   Reassessment of Embedded Derivatives\\n- IFRIC 10                  Interim Financial Reporting and Impairment\\n- IFRIC 12                  Service Concession Arrangements\\n- IFRIC 13                  Customer Loyalty Programmes\\n- IFRIC 14                  IAS 19 - The Limit on a Defined Benefit Asset, Minimum Funding Requirements and their Interaction\\n- IFRIC 15                  Agreements for the Construction of Real Estate\\n- IFRIC 16                  Hedges of a Net Investment in a Foreign Operation\\n- IFRIC 17                  Distributions of Non-Cash Assets to Owners\\n- IFRIC 18                  Transfers of Assets from Customers\\n- IFRIC 19                  Extinguishing Financial Liabilities with Equity Instruments\\n- SIC-7                      Introduction of the Euro\\n- SIC-10                    Government Assistance - No Specific Relation to Operating Activities\\n- SIC-12                    Consolidation - Special Purpose Entities\\n- SIC-13                    Jointly Controlled Entities - Non-Monetary Contributions by Venturers\\n- SIC-15                    Operating Leases - Incentives\\n- SIC-21                    Income Taxes - Recovery of Revalued Non-Depreciable Assets\\n- SIC-25                    Income Taxes - Changes in the Tax Status of an Entity or its Shareholders\\n- SIC-27                    Evaluating the Substance of Transactions Involving the Legal Form of a Lease\\n- SIC-29                    Service Concession Arrangements: Disclosures\\n- SIC-31                    Revenue - Barter Transactions involving Advertising Services\\n- SIC-32                    Intangible Assets - website Costs\",\"primaryKey\":[\"AccountingFrameworkId\",\"AccountingFrameworkStandardId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Framework.\",\"isNullable\":false,\"name\":\"AccountingFrameworkId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Framework Standard.\",\"isNullable\":false,\"name\":\"AccountingFrameworkStandardId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of an Accounting Framework Standard.\",\"isNullable\":true,\"name\":\"AccountingFrameworkStandardName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingFrameworkStandard.cdm.json/AccountingFrameworkStandard\",\"name\":\"AccountingFrameworkStandardDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of an Accounting Framework Standard.\",\"isNullable\":true,\"name\":\"AccountingFrameworkStandardDescription\"}]}}}",
								"Description": "Each Accounting Framework consists of a set of standards / rules / interpretations. These standards guide the organization in how financial transactions should be reflected in an organization's accounting system and how an organization should prepare their financial reporting.\n\nEach Accounting Framework has its own set of standards that must be followed. \n\nThe International Financial Reporting Standards (IFRS), one of many different accounting frameworks, is becoming increasingly used throughout the world. For this reason we have included its set of standards as way of an example. The Standards and Interpretations that make up the IFRS include:\n\nEx:\nStandard/ Interpretation    Title\n- IFRS 1                    First-time Adoption of International Financial Reporting Standards\n- IFRS 2                    Share-based Payment\n- IFRS 3                    Business Combinations\n- IFRS 4                    Insurance Contracts\n- IFRS 5                    Non-current Assets Held for Sale and Discontinued Operations\n- IFRS 6                    Exploration for and Evaluation of Mineral Resources\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has not yet adopted IFRS 9)\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has adopted IFRS 9)\n- IFRS 8                    Operating Segments\n- IFRS 9                    Financial Instruments \n- IAS 1                     Presentation of Financial Statements\n- IAS 2                     Inventories\n- IAS 7                     Statement of Cash Flows\n- IAS 8                     Accounting Policies, Changes in Accounting Estimates and Errors\n- IAS 10                    Events after the Reporting Period\n- IAS 11                    Construction Contracts\n- IAS 12                    Income Taxes\n- IAS 16                    Property, Plant and Equipment\n- IAS 17                    Leases\n- IAS 18                    Revenue\n- IAS 19                    Employee Benefits\n- IAS 20                    Accounting for Government Grants and Disclosure of Government Assistance\n- IAS 21                    The Effects of Changes in Foreign Exchange Rates\n- IAS 23                    Borrowing Costs\n- IAS 24(3)                 Related Party Disclosures\n- IAS 24(2009)(3)           Related Party Disclosures\n- IAS 26                    Accounting and Reporting by Retirement Benefit Plans\n- IAS 27                    Consolidated and Separate Financial Statements \n- IAS 28                    Investments in Associates\n- IAS 29                    Financial Reporting in Hyperinflationary Economies\n- IAS 31                    Interests in Joint Ventures\n- IAS 32                    Financial Instruments: Presentation\n- IAS 33                    Earnings Per Share\n- IAS 34                    Interim Financial Reporting\n- IAS 36                    Impairment of Assets\n- IAS 37                    Provisions, Contingent Liabilities and Contingent Assets\n- IAS 38                    Intangible Assets\n- IAS 39                    Financial Instruments: Recognition and Measurement\n- IAS 40                    Investment Property\n- IAS 41                    Agriculture \n- IFRIC 1                   Changes in Existing Decommissioning, Restoration and Similar Liabilities\n- IFRIC 2                   Members' Shares in Co-operative Entities and Similar Instruments \n- IFRIC 4                   Determining whether an Arrangement contains a Lease\n- IFRIC 5                   Rights to Interests arising from Decommissioning, Restoration and Environmental Rehabilitation Funds\n- IFRIC 6                   Liabilities arising from Participating in a Specific Market - Waste Electrical and Electronic Equipment\n- IFRIC 7                   Applying the Restatement Approach under IAS 29 Financial Reporting in Hyperinflationary Economies\n- IFRIC 9                   Reassessment of Embedded Derivatives\n- IFRIC 10                  Interim Financial Reporting and Impairment\n- IFRIC 12                  Service Concession Arrangements\n- IFRIC 13                  Customer Loyalty Programmes\n- IFRIC 14                  IAS 19 - The Limit on a Defined Benefit Asset, Minimum Funding Requirements and their Interaction\n- IFRIC 15                  Agreements for the Construction of Real Estate\n- IFRIC 16                  Hedges of a Net Investment in a Foreign Operation\n- IFRIC 17                  Distributions of Non-Cash Assets to Owners\n- IFRIC 18                  Transfers of Assets from Customers\n- IFRIC 19                  Extinguishing Financial Liabilities with Equity Instruments\n- SIC-7                      Introduction of the Euro\n- SIC-10                    Government Assistance - No Specific Relation to Operating Activities\n- SIC-12                    Consolidation - Special Purpose Entities\n- SIC-13                    Jointly Controlled Entities - Non-Monetary Contributions by Venturers\n- SIC-15                    Operating Leases - Incentives\n- SIC-21                    Income Taxes - Recovery of Revalued Non-Depreciable Assets\n- SIC-25                    Income Taxes - Changes in the Tax Status of an Entity or its Shareholders\n- SIC-27                    Evaluating the Substance of Transactions Involving the Legal Form of a Lease\n- SIC-29                    Service Concession Arrangements: Disclosures\n- SIC-31                    Revenue - Barter Transactions involving Advertising Services\n- SIC-32                    Intangible Assets - website Costs",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "AccountingFrameworkId,AccountingFrameworkStandardId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"AccountingFrameworkId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingFrameworkStandardId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingFrameworkStandardName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingFrameworkStandardDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "c0b701a9-96a3-4879-a078-47672d39510a",
							"Description": "Each Accounting Framework consists of a set of standards / rules / interpretations. These standards guide the organization in how financial transactions should be reflected in an organization's accounting system and how an organization should prepare their financial reporting.\n\nEach Accounting Framework has its own set of standards that must be followed. \n\nThe International Financial Reporting Standards (IFRS), one of many different accounting frameworks, is becoming increasingly used throughout the world. For this reason we have included its set of standards as way of an example. The Standards and Interpretations that make up the IFRS include:\n\nEx:\nStandard/ Interpretation    Title\n- IFRS 1                    First-time Adoption of International Financial Reporting Standards\n- IFRS 2                    Share-based Payment\n- IFRS 3                    Business Combinations\n- IFRS 4                    Insurance Contracts\n- IFRS 5                    Non-current Assets Held for Sale and Discontinued Operations\n- IFRS 6                    Exploration for and Evaluation of Mineral Resources\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has not yet adopted IFRS 9)\n- IFRS 7(2)                 Financial Instruments: Disclosures (entity has adopted IFRS 9)\n- IFRS 8                    Operating Segments\n- IFRS 9                    Financial Instruments \n- IAS 1                     Presentation of Financial Statements\n- IAS 2                     Inventories\n- IAS 7                     Statement of Cash Flows\n- IAS 8                     Accounting Policies, Changes in Accounting Estimates and Errors\n- IAS 10                    Events after the Reporting Period\n- IAS 11                    Construction Contracts\n- IAS 12                    Income Taxes\n- IAS 16                    Property, Plant and Equipment\n- IAS 17                    Leases\n- IAS 18                    Revenue\n- IAS 19                    Employee Benefits\n- IAS 20                    Accounting for Government Grants and Disclosure of Government Assistance\n- IAS 21                    The Effects of Changes in Foreign Exchange Rates\n- IAS 23                    Borrowing Costs\n- IAS 24(3)                 Related Party Disclosures\n- IAS 24(2009)(3)           Related Party Disclosures\n- IAS 26                    Accounting and Reporting by Retirement Benefit Plans\n- IAS 27                    Consolidated and Separate Financial Statements \n- IAS 28                    Investments in Associates\n- IAS 29                    Financial Reporting in Hyperinflationary Economies\n- IAS 31                    Interests in Joint Ventures\n- IAS 32                    Financial Instruments: Presentation\n- IAS 33                    Earnings Per Share\n- IAS 34                    Interim Financial Reporting\n- IAS 36                    Impairment of Assets\n- IAS 37                    Provisions, Contingent Liabilities and Contingent Assets\n- IAS 38                    Intangible Assets\n- IAS 39                    Financial Instruments: Recognition and Measurement\n- IAS 40                    Investment Property\n- IAS 41                    Agriculture \n- IFRIC 1                   Changes in Existing Decommissioning, Restoration and Similar Liabilities\n- IFRIC 2                   Members' Shares in Co-operative Entities and Similar Instruments \n- IFRIC 4                   Determining whether an Arrangement contains a Lease\n- IFRIC 5                   Rights to Interests arising from Decommissioning, Restoration and Environmental Rehabilitation Funds\n- IFRIC 6                   Liabilities arising from Participating in a Specific Market - Waste Electrical and Electronic Equipment\n- IFRIC 7                   Applying the Restatement Approach under IAS 29 Financial Reporting in Hyperinflationary Economies\n- IFRIC 9                   Reassessment of Embedded Derivatives\n- IFRIC 10                  Interim Financial Reporting and Impairment\n- IFRIC 12                  Service Concession Arrangements\n- IFRIC 13                  Customer Loyalty Programmes\n- IFRIC 14                  IAS 19 - The Limit on a Defined Benefit Asset, Minimum Funding Requirements and their Interaction\n- IFRIC 15                  Agreements for the Construction of Real Estate\n- IFRIC 16                  Hedges of a Net Investment in a Foreign Operation\n- IFRIC 17                  Distributions of Non-Cash Assets to Owners\n- IFRIC 18                  Transfers of Assets from Customers\n- IFRIC 19                  Extinguishing Financial Liabilities with Equity Instruments\n- SIC-7                      Introduction of the Euro\n- SIC-10                    Government Assistance - No Specific Relation to Operating Activities\n- SIC-12                    Consolidation - Special Purpose Entities\n- SIC-13                    Jointly Controlled Entities - Non-Monetary Contributions by Venturers\n- SIC-15                    Operating Leases - Incentives\n- SIC-21                    Income Taxes - Recovery of Revalued Non-Depreciable Assets\n- SIC-25                    Income Taxes - Changes in the Tax Status of an Entity or its Shareholders\n- SIC-27                    Evaluating the Substance of Transactions Involving the Legal Form of a Lease\n- SIC-29                    Service Concession Arrangements: Disclosures\n- SIC-31                    Revenue - Barter Transactions involving Advertising Services\n- SIC-32                    Intangible Assets - website Costs"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "AccountingProcedureType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "AccountingProcedureTypeId",
										"Description": "The unique identifier of an Accounting Procedure Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingProcedureType.cdm.json/AccountingProcedureType",
											"Name": "AccountingProcedureTypeId"
										}
									},
									{
										"Name": "AccountingProcedureTypeName",
										"Description": "The name of an Accounting Procedure Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingProcedureType.cdm.json/AccountingProcedureType",
											"Name": "AccountingProcedureTypeName"
										}
									},
									{
										"Name": "AccountingProcedureTypeDescription",
										"Description": "The description of an Accounting Procedure Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "AccountingProcedureType.cdm.json/AccountingProcedureType",
											"Name": "AccountingProcedureTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "80a938c3-8763-4396-84c5-00350bc3a473",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingProcedureType",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/AccountingProcedureType",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"AccountingProcedureTypeId\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeId\"},\"AccountingProcedureTypeName\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeName\"},\"AccountingProcedureTypeDescription\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"AccountingProcedureType\",\"path\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\"},\"description\":\"An accounting procedure alters or affects one or more accounts.\\n\\nFor Example, closing entries at the end of an accounting period transfer the balances of temporary accounts to a permanent stockholders' equity account, Retained Earnings.   After the closing process - revenues, expenses and income summary accounts have zero balances.\\n\\nThis is often due to the accrual basis of accounting in which revenue is recognized when earned, regardless of when the cash is actually collected and expenses are matched to revenue regardless of when cash is paid out.   \\n\\nTo adjust expense or income items that have already been recorded, a reclassification or adjusting entry is required that involves one or more transactions affecting associated accounts.\",\"primaryKey\":[\"AccountingProcedureTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Accounting Procedure Type.\",\"isNullable\":false,\"name\":\"AccountingProcedureTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of an Accounting Procedure Type.\",\"isNullable\":true,\"name\":\"AccountingProcedureTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"AccountingProcedureType.cdm.json/AccountingProcedureType\",\"name\":\"AccountingProcedureTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of an Accounting Procedure Type.\",\"isNullable\":true,\"name\":\"AccountingProcedureTypeDescription\"}]}}}",
								"Description": "An accounting procedure alters or affects one or more accounts.\n\nFor Example, closing entries at the end of an accounting period transfer the balances of temporary accounts to a permanent stockholders' equity account, Retained Earnings.   After the closing process - revenues, expenses and income summary accounts have zero balances.\n\nThis is often due to the accrual basis of accounting in which revenue is recognized when earned, regardless of when the cash is actually collected and expenses are matched to revenue regardless of when cash is paid out.   \n\nTo adjust expense or income items that have already been recorded, a reclassification or adjusting entry is required that involves one or more transactions affecting associated accounts.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "AccountingProcedureTypeId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"AccountingProcedureTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"AccountingProcedureTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountingProcedureTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "ae7259d9-7b58-4eaf-b2cf-5aa4974c10e8",
							"Description": "An accounting procedure alters or affects one or more accounts.\n\nFor Example, closing entries at the end of an accounting period transfer the balances of temporary accounts to a permanent stockholders' equity account, Retained Earnings.   After the closing process - revenues, expenses and income summary accounts have zero balances.\n\nThis is often due to the accrual basis of accounting in which revenue is recognized when earned, regardless of when the cash is actually collected and expenses are matched to revenue regardless of when cash is paid out.   \n\nTo adjust expense or income items that have already been recorded, a reclassification or adjusting entry is required that involves one or more transactions affecting associated accounts."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "BadDebtWriteOff",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "PartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "PartyId"
										}
									},
									{
										"Name": "WriteOffDate",
										"Description": "The date of the write-off.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "WriteOffDate"
										}
									},
									{
										"Name": "WriteOffAmount",
										"Description": "The amount of the write-off.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "WriteOffAmount"
										}
									},
									{
										"Name": "WriteOffDescription",
										"Description": "The description of the write-off.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "WriteOffDescription"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 3,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "IsoCurrencyCode"
										}
									},
									{
										"Name": "WriteOffMethodId",
										"Description": "The unique identifier of a write-off method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BadDebtWriteOff.cdm.json/BadDebtWriteOff",
											"Name": "WriteOffMethodId"
										}
									}
								],
								"ColumnSetEntityName": "6ec0508f-198a-4da6-950c-78877f7886e3",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/BadDebtWriteOff",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/BadDebtWriteOff",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"LegalEntityId\"},\"PartyId\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"PartyId\"},\"WriteOffDate\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffDate\"},\"WriteOffAmount\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffAmount\"},\"WriteOffDescription\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffDescription\"},\"IsoCurrencyCode\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"IsoCurrencyCode\"},\"WriteOffMethodId\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffMethodId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"BadDebtWriteOff\",\"path\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\"},\"description\":\"The write-off of a bad debt(s) by the associated party as of the date indicated.\",\"primaryKey\":[\"LegalEntityId\",\"PartyId\",\"WriteOffDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"PartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":false,\"name\":\"PartyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date of the write-off.\",\"isNullable\":false,\"name\":\"WriteOffDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The amount of the write-off.\",\"isNullable\":true,\"scale\":2,\"name\":\"WriteOffAmount\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of the write-off.\",\"isNullable\":true,\"name\":\"WriteOffDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":true,\"name\":\"IsoCurrencyCode\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BadDebtWriteOff.cdm.json/BadDebtWriteOff\",\"name\":\"WriteOffMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a write-off method.\",\"isNullable\":true,\"name\":\"WriteOffMethodId\"}]}}}",
								"Description": "The write-off of a bad debt(s) by the associated party as of the date indicated.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,PartyId,WriteOffDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PartyId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"WriteOffDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"WriteOffAmount\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WriteOffDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IsoCurrencyCode\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WriteOffMethodId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "ccd315fb-00af-414f-b8a6-d09b90a0ea93",
							"Description": "The write-off of a bad debt(s) by the associated party as of the date indicated."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CashFlowStatementPreparationMethod",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "CashFlowStatementPreparationMethodId",
										"Description": "The unique identifier of a Cash Flow Statement Preparation Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod",
											"Name": "CashFlowStatementPreparationMethodId"
										}
									},
									{
										"Name": "CashFlowStatementPreparationMethodName",
										"Description": "The name of a Cash Flow Statement Preparation Method.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod",
											"Name": "CashFlowStatementPreparationMethodName"
										}
									},
									{
										"Name": "CashFlowStatementPreparationMethodDescription",
										"Description": "The description of a Cash Flow Statement Preparation Method.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod",
											"Name": "CashFlowStatementPreparationMethodDescription"
										}
									}
								],
								"ColumnSetEntityName": "e882fdfc-e039-4171-857b-221513fac177",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CashFlowStatementPreparationMethod",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CashFlowStatementPreparationMethod",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CashFlowStatementPreparationMethodId\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodId\"},\"CashFlowStatementPreparationMethodName\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodName\"},\"CashFlowStatementPreparationMethodDescription\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CashFlowStatementPreparationMethod\",\"path\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\"},\"description\":\"There are two methods for preparing the cash flow statement.\\n\\n(1)  Direct Method = Summarize debits and credits to the Cash account directly  \\n\\n(2)  Indirect Method = analyzing changes during the year in balance sheet items and analyzing the numbers on the income statement for the year.\",\"primaryKey\":[\"CashFlowStatementPreparationMethodId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cash Flow Statement Preparation Method.\",\"isNullable\":false,\"name\":\"CashFlowStatementPreparationMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Cash Flow Statement Preparation Method.\",\"isNullable\":true,\"name\":\"CashFlowStatementPreparationMethodName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CashFlowStatementPreparationMethod.cdm.json/CashFlowStatementPreparationMethod\",\"name\":\"CashFlowStatementPreparationMethodDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a Cash Flow Statement Preparation Method.\",\"isNullable\":true,\"name\":\"CashFlowStatementPreparationMethodDescription\"}]}}}",
								"Description": "There are two methods for preparing the cash flow statement.\n\n(1)  Direct Method = Summarize debits and credits to the Cash account directly  \n\n(2)  Indirect Method = analyzing changes during the year in balance sheet items and analyzing the numbers on the income statement for the year.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "CashFlowStatementPreparationMethodId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"CashFlowStatementPreparationMethodId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CashFlowStatementPreparationMethodName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CashFlowStatementPreparationMethodDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "aadafdf4-50a8-4ca7-a3fd-7cebc81b5b0b",
							"Description": "There are two methods for preparing the cash flow statement.\n\n(1)  Direct Method = Summarize debits and credits to the Cash account directly  \n\n(2)  Indirect Method = analyzing changes during the year in balance sheet items and analyzing the numbers on the income statement for the year."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CountryCurrency",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "CountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CountryCurrency.cdm.json/CountryCurrency",
											"Name": "CountryId"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 3,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CountryCurrency.cdm.json/CountryCurrency",
											"Name": "IsoCurrencyCode"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the relationship is defined.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CountryCurrency.cdm.json/CountryCurrency",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the relationship is defined.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CountryCurrency.cdm.json/CountryCurrency",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CountryCurrencyNote",
										"Description": "A note, comment or additional information regarding the country currency.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CountryCurrency.cdm.json/CountryCurrency",
											"Name": "CountryCurrencyNote"
										}
									}
								],
								"ColumnSetEntityName": "9b710e8d-d0c1-4f82-93ae-9621d36807f7",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CountryCurrency",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CountryCurrency",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CountryId\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"CountryId\"},\"IsoCurrencyCode\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"IsoCurrencyCode\"},\"PeriodStartDate\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"PeriodEndDate\"},\"CountryCurrencyNote\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"CountryCurrencyNote\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CountryCurrency\",\"path\":\"CountryCurrency.cdm.json/CountryCurrency\"},\"description\":\"The currency used by a country.\",\"primaryKey\":[\"CountryId\",\"IsoCurrencyCode\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"CountryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":false,\"name\":\"CountryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":false,\"name\":\"IsoCurrencyCode\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the relationship is defined.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the relationship is defined.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CountryCurrency.cdm.json/CountryCurrency\",\"name\":\"CountryCurrencyNote\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A note, comment or additional information regarding the country currency.\",\"isNullable\":true,\"name\":\"CountryCurrencyNote\"}]}}}",
								"Description": "The currency used by a country.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "CountryId,IsoCurrencyCode,PeriodStartDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"CountryId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"IsoCurrencyCode\",\"type\":\"string\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CountryCurrencyNote\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "3e083356-be82-4508-9ba1-988840b898ce",
							"Description": "The currency used by a country."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CreditRatingAgencyRating",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "CreditRatingAgencyId",
										"Description": "The unique identifier of a Credit Rating Agency.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating",
											"Name": "CreditRatingAgencyId"
										}
									},
									{
										"Name": "CreditRatingAgencyRatingId",
										"Description": "The unique identifier of a credit rating agency rating.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating",
											"Name": "CreditRatingAgencyRatingId"
										}
									},
									{
										"Name": "CreditRatingAgencyRatingName",
										"Description": "The name of a credit rating agency rating.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating",
											"Name": "CreditRatingAgencyRatingName"
										}
									},
									{
										"Name": "CreditRatingAgencyRatingDescription",
										"Description": "The description of a credit rating agency rating.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating",
											"Name": "CreditRatingAgencyRatingDescription"
										}
									}
								],
								"ColumnSetEntityName": "3d9128bd-76c6-4508-8779-65404e8e6a7a",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CreditRatingAgencyRating",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/CreditRatingAgencyRating",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CreditRatingAgencyId\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyId\"},\"CreditRatingAgencyRatingId\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingId\"},\"CreditRatingAgencyRatingName\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingName\"},\"CreditRatingAgencyRatingDescription\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CreditRatingAgencyRating\",\"path\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\"},\"description\":\"A specific credit rating provided by the associated Credit Rating Agency.\\n\\nEx:\\nStandard & Poor's:\\nAAA - An obligor rated 'AAA' has EXTREMELY STRONG capacity to meet its financial commitments. 'AAA' is the highest Issuer Credit Rating assigned by Standard & Poor's. \\n\\nAA - An obligor rated 'AA' has VERY STRONG capacity to meet its financial commitments. It differs from the highest rated obligors only in small degree. \\n\\nA - An obligor rated 'A' has STRONG capacity to meet its financial commitments but is somewhat more susceptible to the adverse effects of changes in circumstances and economic conditions than obligors in higher-rated categories. \\n\\nBBB - An obligor rated 'BBB' has ADEQUATE capacity to meet its financial commitments. However, adverse economic conditions or changing circumstances are more likely to lead to a weakened capacity of the obligor to meet its financial commitments. \\n\\nObligors rated 'BB', 'B', 'CCC' and 'CC' are regarded as having significant speculative characteristics. 'BB' indicates the least degree of speculation and 'CC' the highest. While such obligors will likely have some quality and protective characteristics, these may be outweighed by large uncertainties or major exposures to adverse conditions. \\n\\nBB - An obligor rated 'BB' is LESS VULNERABLE in the near term than other lower-rated obligors. However, it faces major ongoing uncertainties and exposure to adverse business, financial, or economic conditions which could lead to the obligor's inadequate capacity to meet its financial commitments. \\n\\nB - An obligor rated 'B' is MORE VULNERABLE than the obligors rated 'BB', but the obligor currently has the capacity to meet its financial commitments. Adverse business, financial, or economic conditions will likely impair the obligor's capacity or willingness to meet its financial commitments. \\n\\nCCC - An obligor rated 'CCC' is CURRENTLY VULNERABLE, and is dependent upon favorable business, financial, and economic conditions to meet its financial commitments. \\n\\nCC - An obligor rated 'CC' is CURRENTLY HIGHLY-VULNERABLE. \\nPlus (+) or minus (-): - The ratings from 'AA' to 'CCC' may be modified by the addition of a plus or minus sign to show relative standing within the major rating categories. \\n\\nR - An obligor rated 'R' is under regulatory supervision owing to its financial condition. During the pendency of the regulatory supervision the regulators may have the power to favor one class of obligations over others or pay some obligations and not others. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of regulatory supervision on specific issues or classes of obligations. \\n\\nSD and D - An obligor rated 'SD' (Selective Default) or 'D' has failed to pay one or more of its financial obligations (rated or unrated) when it became due. \\nA 'D' rating is assigned when Standard & Poor's believes that the default will be a general default and that the obligor will fail to pay all or substantially all of its obligations as they become due. An 'SD' rating is assigned when Standard & Poor's believes that the obligor has selectively defaulted on a specific issue or class of obligations but it will continue to meet its payment obligations on other issues or classes of obligations in a timely manner. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of a default on specific issues or classes of obligations. \\n\\nN.R. - An issuer designated N.R. is not rated. \\n\\nFitch Investors Service bond ratings:\\n------------------------------------------------\\nHighest quality = AAA\\nHigh quality = AA\\nUpper medium quality = A\\nMedium grade = BBB\\nSomewhat speculative = BB\\nLow grade, speculative = B\\nLow grade, default possible = CCC\\nLow grade, partial recovery possible = CC\\nImminent default = C\\nDefault = D\\n\\nStandard & Poor's bond ratings:\\n------------------------------------------\\nHighest quality = AAA\\nHigh quality = AA\\nUpper medium quality = A\\nMedium grade = BBB\\nSomewhat speculative = BB\\nLow grade, speculative = B\\nLow grade, default possible = CCC\\nLow grade, partial recovery possible = CC\\nDefault, recovery unlikely = C\\n\\nDuff & Phelps bond ratings:\\n------------------------------------\\nHighest quality = AAA\\nHigh quality = AA\\nUpper medium quality = A\\nMedium grade = BBB\\nSomewhat speculative = BB\\nLow grade, speculative = B\\nLow grade, default possible = CCC\\nLow grade, partial recovery possible = CC\\nImminent default = C\\nDefault = D\\n\\nMoody's Bond \\n--------------------\\nAaa - Bonds which are rated AaAA are judged to be of the best quality. They carry the smallest degree of investment risk and are generally referred to as \\\"gilt edged.\\\" Interest payments are protected by a large or an exceptionally stable margin and principal is secure. While the various protective elements are likely to change, such changes as can be visualized are most unlikely to impair the fundamentally strong position of such issues. \\n\\nAa - Bonds which are rated Aa are judged to be of high quality by all standards. Together with the AAA group they comprise what are generally known as high grade bonds. They are rated lower than the best bonds because margins of protection may not be as large as in \\n\\nAaa securities or fluctuation of protective elements may be of greater amplitude or there may be other elements present which make the long-term risk appear somewhat larger than the Aaa securities. \\n\\nA - Bonds which are rated A possess many favorable investment attributes and are considered as upper-medium-grade obligations. Factors giving security to principal and interest are considered\\nadequate, but elements may be present which suggest a susceptibility to impairment some time in the future. \\n\\nBaa - Bonds which are rated Baa are considered as medium-grade obligations (i.e., they are neither highly protected not poorly secured). Interest payments and principal security appear adequate for the present but certain protective elements may be lacking or may be characteristically unreliable over any great length of time. Such bonds lack outstanding investment characteristics and in fact have speculative characteristics as well. \\n\\nBa \\nBonds which are rated Ba are judged to have speculative elements; their future cannot be considered as well-assured. Often the protection of interest and principal payments may be very moderate, and thereby not well safeguarded during both good and bad times over the future. Uncertainty of position characterizes bonds in this class. \\n\\nB - Bonds which are rated B generally lack characteristics of the desirable investment. Assurance of interest and principal payments of maintenance of other terms of the contract over any long period of time may be small. \\n\\nCaa - Bonds which are rated CAA are of poor standing. Such issues may be in default or there may be present elements of danger with respect to principal or interest. \\n\\nCa -Bonds which are rated Ca represent obligations which are speculative in a high degree. Such issues are often in default or have other marked shortcomings. \\n\\nC - Bonds which are rated C are the lowest rated class of bonds, and issues so rated can be regarded  having extremely poor prospects of ever attaining any real investment standing.\\n\\nStandard and Poor's Commercial Paper Rating\\n\\nA-1/Prime-1\\nThe highest rating; it indicates a strong degree of safety concerning timely payment. Issues with extremely strong safety characteristics are designated as A-1+/Prime-1+.\\n\\nA-2/Prime-2\\nThe rating for a satisfactory security; the relative safety of an investment in this rating category is not as high as in the A-1/Prime-1 category.\\n\\nA-3/Prime-3\\nThe rating for an adequate level of investment safety. Issues with this rating are more susceptible to market fluctuations than obligations with higher ratings.\\n\\nB\\nIssues rated B are regarded as having only speculative capacity for timely payment.\\n\\nC\\nThis rating is assigned to short-term debt obligations with a doubtful capacity for payment.\\n\\nD\\nDebt rated D is in payment default. The D rating category is used when interest payments or principal payments are not made on the due date, even if the applicable grace period has not expired, unless Standard & Poor's believes such payments will be made during such grace period.\",\"primaryKey\":[\"CreditRatingAgencyId\",\"CreditRatingAgencyRatingId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Credit Rating Agency.\",\"isNullable\":false,\"name\":\"CreditRatingAgencyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a credit rating agency rating.\",\"isNullable\":false,\"name\":\"CreditRatingAgencyRatingId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a credit rating agency rating.\",\"isNullable\":true,\"name\":\"CreditRatingAgencyRatingName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CreditRatingAgencyRating.cdm.json/CreditRatingAgencyRating\",\"name\":\"CreditRatingAgencyRatingDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a credit rating agency rating.\",\"isNullable\":true,\"name\":\"CreditRatingAgencyRatingDescription\"}]}}}",
								"Description": "A specific credit rating provided by the associated Credit Rating Agency.\n\nEx:\nStandard & Poor's:\nAAA - An obligor rated 'AAA' has EXTREMELY STRONG capacity to meet its financial commitments. 'AAA' is the highest Issuer Credit Rating assigned by Standard & Poor's. \n\nAA - An obligor rated 'AA' has VERY STRONG capacity to meet its financial commitments. It differs from the highest rated obligors only in small degree. \n\nA - An obligor rated 'A' has STRONG capacity to meet its financial commitments but is somewhat more susceptible to the adverse effects of changes in circumstances and economic conditions than obligors in higher-rated categories. \n\nBBB - An obligor rated 'BBB' has ADEQUATE capacity to meet its financial commitments. However, adverse economic conditions or changing circumstances are more likely to lead to a weakened capacity of the obligor to meet its financial commitments. \n\nObligors rated 'BB', 'B', 'CCC' and 'CC' are regarded as having significant speculative characteristics. 'BB' indicates the least degree of speculation and 'CC' the highest. While such obligors will likely have some quality and protective characteristics, these may be outweighed by large uncertainties or major exposures to adverse conditions. \n\nBB - An obligor rated 'BB' is LESS VULNERABLE in the near term than other lower-rated obligors. However, it faces major ongoing uncertainties and exposure to adverse business, financial, or economic conditions which could lead to the obligor's inadequate capacity to meet its financial commitments. \n\nB - An obligor rated 'B' is MORE VULNERABLE than the obligors rated 'BB', but the obligor currently has the capacity to meet its financial commitments. Adverse business, financial, or economic conditions will likely impair the obligor's capacity or willingness to meet its financial commitments. \n\nCCC - An obligor rated 'CCC' is CURRENTLY VULNERABLE, and is dependent upon favorable business, financial, and economic conditions to meet its financial commitments. \n\nCC - An obligor rated 'CC' is CURRENTLY HIGHLY-VULNERABLE. \nPlus (+) or minus (-): - The ratings from 'AA' to 'CCC' may be modified by the addition of a plus or minus sign to show relative standing within the major rating categories. \n\nR - An obligor rated 'R' is under regulatory supervision owing to its financial condition. During the pendency of the regulatory supervision the regulators may have the power to favor one class of obligations over others or pay some obligations and not others. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of regulatory supervision on specific issues or classes of obligations. \n\nSD and D - An obligor rated 'SD' (Selective Default) or 'D' has failed to pay one or more of its financial obligations (rated or unrated) when it became due. \nA 'D' rating is assigned when Standard & Poor's believes that the default will be a general default and that the obligor will fail to pay all or substantially all of its obligations as they become due. An 'SD' rating is assigned when Standard & Poor's believes that the obligor has selectively defaulted on a specific issue or class of obligations but it will continue to meet its payment obligations on other issues or classes of obligations in a timely manner. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of a default on specific issues or classes of obligations. \n\nN.R. - An issuer designated N.R. is not rated. \n\nFitch Investors Service bond ratings:\n------------------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nImminent default = C\nDefault = D\n\nStandard & Poor's bond ratings:\n------------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nDefault, recovery unlikely = C\n\nDuff & Phelps bond ratings:\n------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nImminent default = C\nDefault = D\n\nMoody's Bond \n--------------------\nAaa - Bonds which are rated AaAA are judged to be of the best quality. They carry the smallest degree of investment risk and are generally referred to as \"gilt edged.\" Interest payments are protected by a large or an exceptionally stable margin and principal is secure. While the various protective elements are likely to change, such changes as can be visualized are most unlikely to impair the fundamentally strong position of such issues. \n\nAa - Bonds which are rated Aa are judged to be of high quality by all standards. Together with the AAA group they comprise what are generally known as high grade bonds. They are rated lower than the best bonds because margins of protection may not be as large as in \n\nAaa securities or fluctuation of protective elements may be of greater amplitude or there may be other elements present which make the long-term risk appear somewhat larger than the Aaa securities. \n\nA - Bonds which are rated A possess many favorable investment attributes and are considered as upper-medium-grade obligations. Factors giving security to principal and interest are considered\nadequate, but elements may be present which suggest a susceptibility to impairment some time in the future. \n\nBaa - Bonds which are rated Baa are considered as medium-grade obligations (i.e., they are neither highly protected not poorly secured). Interest payments and principal security appear adequate for the present but certain protective elements may be lacking or may be characteristically unreliable over any great length of time. Such bonds lack outstanding investment characteristics and in fact have speculative characteristics as well. \n\nBa \nBonds which are rated Ba are judged to have speculative elements; their future cannot be considered as well-assured. Often the protection of interest and principal payments may be very moderate, and thereby not well safeguarded during both good and bad times over the future. Uncertainty of position characterizes bonds in this class. \n\nB - Bonds which are rated B generally lack characteristics of the desirable investment. Assurance of interest and principal payments of maintenance of other terms of the contract over any long period of time may be small. \n\nCaa - Bonds which are rated CAA are of poor standing. Such issues may be in default or there may be present elements of danger with respect to principal or interest. \n\nCa -Bonds which are rated Ca represent obligations which are speculative in a high degree. Such issues are often in default or have other marked shortcomings. \n\nC - Bonds which are rated C are the lowest rated class of bonds, and issues so rated can be regarded  having extremely poor prospects of ever attaining any real investment standing.\n\nStandard and Poor's Commercial Paper Rating\n\nA-1/Prime-1\nThe highest rating; it indicates a strong degree of safety concerning timely payment. Issues with extremely strong safety characteristics are designated as A-1+/Prime-1+.\n\nA-2/Prime-2\nThe rating for a satisfactory security; the relative safety of an investment in this rating category is not as high as in the A-1/Prime-1 category.\n\nA-3/Prime-3\nThe rating for an adequate level of investment safety. Issues with this rating are more susceptible to market fluctuations than obligations with higher ratings.\n\nB\nIssues rated B are regarded as having only speculative capacity for timely payment.\n\nC\nThis rating is assigned to short-term debt obligations with a doubtful capacity for payment.\n\nD\nDebt rated D is in payment default. The D rating category is used when interest payments or principal payments are not made on the due date, even if the applicable grace period has not expired, unless Standard & Poor's believes such payments will be made during such grace period.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "CreditRatingAgencyId,CreditRatingAgencyRatingId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"CreditRatingAgencyId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CreditRatingAgencyRatingId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CreditRatingAgencyRatingName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CreditRatingAgencyRatingDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "e131bca3-9a02-4394-bf46-1821450809e0",
							"Description": "A specific credit rating provided by the associated Credit Rating Agency.\n\nEx:\nStandard & Poor's:\nAAA - An obligor rated 'AAA' has EXTREMELY STRONG capacity to meet its financial commitments. 'AAA' is the highest Issuer Credit Rating assigned by Standard & Poor's. \n\nAA - An obligor rated 'AA' has VERY STRONG capacity to meet its financial commitments. It differs from the highest rated obligors only in small degree. \n\nA - An obligor rated 'A' has STRONG capacity to meet its financial commitments but is somewhat more susceptible to the adverse effects of changes in circumstances and economic conditions than obligors in higher-rated categories. \n\nBBB - An obligor rated 'BBB' has ADEQUATE capacity to meet its financial commitments. However, adverse economic conditions or changing circumstances are more likely to lead to a weakened capacity of the obligor to meet its financial commitments. \n\nObligors rated 'BB', 'B', 'CCC' and 'CC' are regarded as having significant speculative characteristics. 'BB' indicates the least degree of speculation and 'CC' the highest. While such obligors will likely have some quality and protective characteristics, these may be outweighed by large uncertainties or major exposures to adverse conditions. \n\nBB - An obligor rated 'BB' is LESS VULNERABLE in the near term than other lower-rated obligors. However, it faces major ongoing uncertainties and exposure to adverse business, financial, or economic conditions which could lead to the obligor's inadequate capacity to meet its financial commitments. \n\nB - An obligor rated 'B' is MORE VULNERABLE than the obligors rated 'BB', but the obligor currently has the capacity to meet its financial commitments. Adverse business, financial, or economic conditions will likely impair the obligor's capacity or willingness to meet its financial commitments. \n\nCCC - An obligor rated 'CCC' is CURRENTLY VULNERABLE, and is dependent upon favorable business, financial, and economic conditions to meet its financial commitments. \n\nCC - An obligor rated 'CC' is CURRENTLY HIGHLY-VULNERABLE. \nPlus (+) or minus (-): - The ratings from 'AA' to 'CCC' may be modified by the addition of a plus or minus sign to show relative standing within the major rating categories. \n\nR - An obligor rated 'R' is under regulatory supervision owing to its financial condition. During the pendency of the regulatory supervision the regulators may have the power to favor one class of obligations over others or pay some obligations and not others. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of regulatory supervision on specific issues or classes of obligations. \n\nSD and D - An obligor rated 'SD' (Selective Default) or 'D' has failed to pay one or more of its financial obligations (rated or unrated) when it became due. \nA 'D' rating is assigned when Standard & Poor's believes that the default will be a general default and that the obligor will fail to pay all or substantially all of its obligations as they become due. An 'SD' rating is assigned when Standard & Poor's believes that the obligor has selectively defaulted on a specific issue or class of obligations but it will continue to meet its payment obligations on other issues or classes of obligations in a timely manner. Please see Standard & Poor's issue credit ratings for a more detailed description of the effects of a default on specific issues or classes of obligations. \n\nN.R. - An issuer designated N.R. is not rated. \n\nFitch Investors Service bond ratings:\n------------------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nImminent default = C\nDefault = D\n\nStandard & Poor's bond ratings:\n------------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nDefault, recovery unlikely = C\n\nDuff & Phelps bond ratings:\n------------------------------------\nHighest quality = AAA\nHigh quality = AA\nUpper medium quality = A\nMedium grade = BBB\nSomewhat speculative = BB\nLow grade, speculative = B\nLow grade, default possible = CCC\nLow grade, partial recovery possible = CC\nImminent default = C\nDefault = D\n\nMoody's Bond \n--------------------\nAaa - Bonds which are rated AaAA are judged to be of the best quality. They carry the smallest degree of investment risk and are generally referred to as \"gilt edged.\" Interest payments are protected by a large or an exceptionally stable margin and principal is secure. While the various protective elements are likely to change, such changes as can be visualized are most unlikely to impair the fundamentally strong position of such issues. \n\nAa - Bonds which are rated Aa are judged to be of high quality by all standards. Together with the AAA group they comprise what are generally known as high grade bonds. They are rated lower than the best bonds because margins of protection may not be as large as in \n\nAaa securities or fluctuation of protective elements may be of greater amplitude or there may be other elements present which make the long-term risk appear somewhat larger than the Aaa securities. \n\nA - Bonds which are rated A possess many favorable investment attributes and are considered as upper-medium-grade obligations. Factors giving security to principal and interest are considered\nadequate, but elements may be present which suggest a susceptibility to impairment some time in the future. \n\nBaa - Bonds which are rated Baa are considered as medium-grade obligations (i.e., they are neither highly protected not poorly secured). Interest payments and principal security appear adequate for the present but certain protective elements may be lacking or may be characteristically unreliable over any great length of time. Such bonds lack outstanding investment characteristics and in fact have speculative characteristics as well. \n\nBa \nBonds which are rated Ba are judged to have speculative elements; their future cannot be considered as well-assured. Often the protection of interest and principal payments may be very moderate, and thereby not well safeguarded during both good and bad times over the future. Uncertainty of position characterizes bonds in this class. \n\nB - Bonds which are rated B generally lack characteristics of the desirable investment. Assurance of interest and principal payments of maintenance of other terms of the contract over any long period of time may be small. \n\nCaa - Bonds which are rated CAA are of poor standing. Such issues may be in default or there may be present elements of danger with respect to principal or interest. \n\nCa -Bonds which are rated Ca represent obligations which are speculative in a high degree. Such issues are often in default or have other marked shortcomings. \n\nC - Bonds which are rated C are the lowest rated class of bonds, and issues so rated can be regarded  having extremely poor prospects of ever attaining any real investment standing.\n\nStandard and Poor's Commercial Paper Rating\n\nA-1/Prime-1\nThe highest rating; it indicates a strong degree of safety concerning timely payment. Issues with extremely strong safety characteristics are designated as A-1+/Prime-1+.\n\nA-2/Prime-2\nThe rating for a satisfactory security; the relative safety of an investment in this rating category is not as high as in the A-1/Prime-1 category.\n\nA-3/Prime-3\nThe rating for an adequate level of investment safety. Issues with this rating are more susceptible to market fluctuations than obligations with higher ratings.\n\nB\nIssues rated B are regarded as having only speculative capacity for timely payment.\n\nC\nThis rating is assigned to short-term debt obligations with a doubtful capacity for payment.\n\nD\nDebt rated D is in payment default. The D rating category is used when interest payments or principal payments are not made on the due date, even if the applicable grace period has not expired, unless Standard & Poor's believes such payments will be made during such grace period."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Currency",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 3,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Currency.cdm.json/Currency",
											"Name": "IsoCurrencyCode"
										}
									},
									{
										"Name": "CurrencyName",
										"Description": "The name of the currency.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Currency.cdm.json/Currency",
											"Name": "CurrencyName"
										}
									},
									{
										"Name": "CountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Currency.cdm.json/Currency",
											"Name": "CountryId"
										}
									},
									{
										"Name": "CurrencySymbol",
										"Description": "The symbol associated with the currency.",
										"OriginDataTypeName": {
											"TypeName": "binary",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "binary"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Currency.cdm.json/Currency",
											"Name": "CurrencySymbol"
										}
									}
								],
								"ColumnSetEntityName": "5a829821-19d5-43d6-8e67-8b0115b44711",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/Currency",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/Currency",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"IsoCurrencyCode\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"IsoCurrencyCode\"},\"CurrencyName\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CurrencyName\"},\"CountryId\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CountryId\"},\"CurrencySymbol\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CurrencySymbol\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Currency\",\"path\":\"Currency.cdm.json/Currency\"},\"description\":\"The definition of Currency is based upon the ISO 4217 standard.\\n\\nISO 4217 is the international standard describing three letter codes (also known as the currency code) to define the names of currencies established by the International Organization for Standardization (ISO). \\n\\nThe first two letters of the code are the two letters of ISO 3166-1 alpha-2 country codes (which are similar to those used for national top-level domains on the Internet) and the third is usually the initial of the currency itself. So Japan's currency code becomes JPY-JP for Japan and Y for yen. This eliminates the problem caused by the names dollar, franc and pound being used in dozens of different countries, each having significantly differing values. Also, if a currency is revalued, the currency code's last letter is changed to distinguish it from the old currency. In some cases, the third letter is the initial for \\\"new\\\" in that country's language, to distinguish it from an older currency that was revalued; the code often long outlasts the usage of the term \\\"new\\\" itself. Examples of this include the Mexican peso (MXN) and the Turkish lira (TRY). Other changes can be seen, however; the Russian ruble, for example, changed from RUR to RUB, where the B comes from the third letter in the word \\\"ruble\\\".\\n\\nThere is also a three-digit code number assigned to each currency, in the same manner as there is also a three-digit code number assigned to each country as part of ISO 3166. This numeric code is usually the same as the ISO 3166 numeric code. For example, USD (US Dollar) has code 840 which is also the numeric code for US (United States).\\n\\nThe standard also defines the relationship between the major currency unit and any minor currency unit. Often, the minor currency unit has a value that is 1/100 of the major unit, but 1/10 or 1/1000 are also common. Some currencies do not have any minor currency unit at all. In others, the major currency unit has so little value that the minor unit is no longer generally used (e.g. the Japanese sen, 1/100th of a yen). Mauritania does not use a decimal division of units, setting 1 ouguiya (UM) = 5 khoums, and Madagascar has 1 ariary = 5 iraimbilanja. This is indicated in the standard by the currency exponent. For example USD has exponent 2, while JPY has exponent 0.\\n\\nISO 4217 includes codes not only for currencies, but also for precious metals (gold, silver, palladium and platinum; by definition expressed per one troy ounce, as compared to \\\"1 USD\\\") and certain other entities used in international finance, e.g. Special Drawing Rights. There are also special codes allocated for testing purposes (XTS), and to indicate no currency transactions (XXX). These codes all begin with the letter \\\"X\\\". The precious metals use \\\"X\\\" plus the metal's chemical symbol; silver, for example, is XAG. ISO 3166 never assigns country codes beginning with \\\"X\\\" while these codes are assigned for privately customized use only (reserved, never for official codes), so ISO 4217 can use \\\"X\\\" codes for non-country-specific currencies without risk of clashing with future country codes.\\n\\nThis is a list of global currencies and the three-character currency codes that we have found are generally used to represent them. \\n\\nIn most cases, the currency code is composed of the country's two-character Internet country code plus an extra character to denote the currency unit.\\n\\nFor example, the code for Canadian Dollars is simply Canada's two-character Internet code (\\\"CA\\\") plus a one-character currency designator (\\\"D\\\").\\n\\nISO 4217 (Codes for the Representation of Currencies and Funds) defines three-letter abbreviations for world currencies. \\n\\nThe general principle used to construct these abbreviations is to take the two-letter abbreviations defined in ISO 3166 (Codes for the Representation of Names of Countries) and append the first letter of the currency name (e.g., USD for the United States \\n\\nIn the case of currencies defined by supra-national entities, ISO 4217 assigns two-letter entity codes starting with \\\"X\\\" to use in place of country codes (e.g., XCD for the Central Caribbean Dollar). \\n\\nThe following are examples:\\n\\nUSD  America (United States of America), Dollars\\nAUD  Australia, Dollars\\nCAD  Canada, Dollars\",\"primaryKey\":[\"IsoCurrencyCode\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":false,\"name\":\"IsoCurrencyCode\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CurrencyName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of the currency.\",\"isNullable\":true,\"name\":\"CurrencyName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CountryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":true,\"name\":\"CountryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Currency.cdm.json/Currency\",\"name\":\"CurrencySymbol\"},\"dataType\":\"binary\",\"description\":\"The symbol associated with the currency.\",\"isNullable\":true,\"name\":\"CurrencySymbol\"}]}}}",
								"Description": "The definition of Currency is based upon the ISO 4217 standard.\n\nISO 4217 is the international standard describing three letter codes (also known as the currency code) to define the names of currencies established by the International Organization for Standardization (ISO). \n\nThe first two letters of the code are the two letters of ISO 3166-1 alpha-2 country codes (which are similar to those used for national top-level domains on the Internet) and the third is usually the initial of the currency itself. So Japan's currency code becomes JPY-JP for Japan and Y for yen. This eliminates the problem caused by the names dollar, franc and pound being used in dozens of different countries, each having significantly differing values. Also, if a currency is revalued, the currency code's last letter is changed to distinguish it from the old currency. In some cases, the third letter is the initial for \"new\" in that country's language, to distinguish it from an older currency that was revalued; the code often long outlasts the usage of the term \"new\" itself. Examples of this include the Mexican peso (MXN) and the Turkish lira (TRY). Other changes can be seen, however; the Russian ruble, for example, changed from RUR to RUB, where the B comes from the third letter in the word \"ruble\".\n\nThere is also a three-digit code number assigned to each currency, in the same manner as there is also a three-digit code number assigned to each country as part of ISO 3166. This numeric code is usually the same as the ISO 3166 numeric code. For example, USD (US Dollar) has code 840 which is also the numeric code for US (United States).\n\nThe standard also defines the relationship between the major currency unit and any minor currency unit. Often, the minor currency unit has a value that is 1/100 of the major unit, but 1/10 or 1/1000 are also common. Some currencies do not have any minor currency unit at all. In others, the major currency unit has so little value that the minor unit is no longer generally used (e.g. the Japanese sen, 1/100th of a yen). Mauritania does not use a decimal division of units, setting 1 ouguiya (UM) = 5 khoums, and Madagascar has 1 ariary = 5 iraimbilanja. This is indicated in the standard by the currency exponent. For example USD has exponent 2, while JPY has exponent 0.\n\nISO 4217 includes codes not only for currencies, but also for precious metals (gold, silver, palladium and platinum; by definition expressed per one troy ounce, as compared to \"1 USD\") and certain other entities used in international finance, e.g. Special Drawing Rights. There are also special codes allocated for testing purposes (XTS), and to indicate no currency transactions (XXX). These codes all begin with the letter \"X\". The precious metals use \"X\" plus the metal's chemical symbol; silver, for example, is XAG. ISO 3166 never assigns country codes beginning with \"X\" while these codes are assigned for privately customized use only (reserved, never for official codes), so ISO 4217 can use \"X\" codes for non-country-specific currencies without risk of clashing with future country codes.\n\nThis is a list of global currencies and the three-character currency codes that we have found are generally used to represent them. \n\nIn most cases, the currency code is composed of the country's two-character Internet country code plus an extra character to denote the currency unit.\n\nFor example, the code for Canadian Dollars is simply Canada's two-character Internet code (\"CA\") plus a one-character currency designator (\"D\").\n\nISO 4217 (Codes for the Representation of Currencies and Funds) defines three-letter abbreviations for world currencies. \n\nThe general principle used to construct these abbreviations is to take the two-letter abbreviations defined in ISO 3166 (Codes for the Representation of Names of Countries) and append the first letter of the currency name (e.g., USD for the United States \n\nIn the case of currencies defined by supra-national entities, ISO 4217 assigns two-letter entity codes starting with \"X\" to use in place of country codes (e.g., XCD for the Central Caribbean Dollar). \n\nThe following are examples:\n\nUSD  America (United States of America), Dollars\nAUD  Australia, Dollars\nCAD  Canada, Dollars",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "IsoCurrencyCode",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"IsoCurrencyCode\",\"type\":\"string\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CurrencyName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CountryId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CurrencySymbol\",\"type\":\"binary\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "866101ca-db9b-43d9-b280-9cce3d832024",
							"Description": "The definition of Currency is based upon the ISO 4217 standard.\n\nISO 4217 is the international standard describing three letter codes (also known as the currency code) to define the names of currencies established by the International Organization for Standardization (ISO). \n\nThe first two letters of the code are the two letters of ISO 3166-1 alpha-2 country codes (which are similar to those used for national top-level domains on the Internet) and the third is usually the initial of the currency itself. So Japan's currency code becomes JPY-JP for Japan and Y for yen. This eliminates the problem caused by the names dollar, franc and pound being used in dozens of different countries, each having significantly differing values. Also, if a currency is revalued, the currency code's last letter is changed to distinguish it from the old currency. In some cases, the third letter is the initial for \"new\" in that country's language, to distinguish it from an older currency that was revalued; the code often long outlasts the usage of the term \"new\" itself. Examples of this include the Mexican peso (MXN) and the Turkish lira (TRY). Other changes can be seen, however; the Russian ruble, for example, changed from RUR to RUB, where the B comes from the third letter in the word \"ruble\".\n\nThere is also a three-digit code number assigned to each currency, in the same manner as there is also a three-digit code number assigned to each country as part of ISO 3166. This numeric code is usually the same as the ISO 3166 numeric code. For example, USD (US Dollar) has code 840 which is also the numeric code for US (United States).\n\nThe standard also defines the relationship between the major currency unit and any minor currency unit. Often, the minor currency unit has a value that is 1/100 of the major unit, but 1/10 or 1/1000 are also common. Some currencies do not have any minor currency unit at all. In others, the major currency unit has so little value that the minor unit is no longer generally used (e.g. the Japanese sen, 1/100th of a yen). Mauritania does not use a decimal division of units, setting 1 ouguiya (UM) = 5 khoums, and Madagascar has 1 ariary = 5 iraimbilanja. This is indicated in the standard by the currency exponent. For example USD has exponent 2, while JPY has exponent 0.\n\nISO 4217 includes codes not only for currencies, but also for precious metals (gold, silver, palladium and platinum; by definition expressed per one troy ounce, as compared to \"1 USD\") and certain other entities used in international finance, e.g. Special Drawing Rights. There are also special codes allocated for testing purposes (XTS), and to indicate no currency transactions (XXX). These codes all begin with the letter \"X\". The precious metals use \"X\" plus the metal's chemical symbol; silver, for example, is XAG. ISO 3166 never assigns country codes beginning with \"X\" while these codes are assigned for privately customized use only (reserved, never for official codes), so ISO 4217 can use \"X\" codes for non-country-specific currencies without risk of clashing with future country codes.\n\nThis is a list of global currencies and the three-character currency codes that we have found are generally used to represent them. \n\nIn most cases, the currency code is composed of the country's two-character Internet country code plus an extra character to denote the currency unit.\n\nFor example, the code for Canadian Dollars is simply Canada's two-character Internet code (\"CA\") plus a one-character currency designator (\"D\").\n\nISO 4217 (Codes for the Representation of Currencies and Funds) defines three-letter abbreviations for world currencies. \n\nThe general principle used to construct these abbreviations is to take the two-letter abbreviations defined in ISO 3166 (Codes for the Representation of Names of Countries) and append the first letter of the currency name (e.g., USD for the United States \n\nIn the case of currencies defined by supra-national entities, ISO 4217 assigns two-letter entity codes starting with \"X\" to use in place of country codes (e.g., XCD for the Central Caribbean Dollar). \n\nThe following are examples:\n\nUSD  America (United States of America), Dollars\nAUD  Australia, Dollars\nCAD  Canada, Dollars"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "DepreciationMethod",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "DepreciationMethodId",
										"Description": "The unique identifier of the Depreciation Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DepreciationMethod.cdm.json/DepreciationMethod",
											"Name": "DepreciationMethodId"
										}
									},
									{
										"Name": "DepreciationMethodName",
										"Description": "The name of the Depreciation Method.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DepreciationMethod.cdm.json/DepreciationMethod",
											"Name": "DepreciationMethodName"
										}
									},
									{
										"Name": "DepreciationMethodDescription",
										"Description": "The description of the Depreciation Method.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DepreciationMethod.cdm.json/DepreciationMethod",
											"Name": "DepreciationMethodDescription"
										}
									}
								],
								"ColumnSetEntityName": "9efa0652-b9b2-463c-ad01-ed982b6649c5",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/DepreciationMethod",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/DepreciationMethod",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"DepreciationMethodId\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodId\"},\"DepreciationMethodName\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodName\"},\"DepreciationMethodDescription\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"DepreciationMethod\",\"path\":\"DepreciationMethod.cdm.json/DepreciationMethod\"},\"description\":\"An accounting method for spreading out the original cost over the estimated life of the fixed assets.\\n\\nDepreciation expense is listed in the Income Statement and reduces the net income for that year.\\n\\nPopular Depreciation Methods are:\\n\\nDECLINING BALANCE\\nDeclining Balance  is an accelerated depreciation method in which an asset's book value is multiplied by a constant depreciation rate (such as double the straight-line percentage, in the case of double-declining-balance.). \\n\\nThis depreciation method is allowed by the U.S. tax code and gives a larger depreciation in the early years of an asset. Unlike the straight line and the sum of the digits methods, both of which use the original basis to calculate the depreciation each year, the double declining balance uses a fixed percentage of the prior year's basis to calculate depreciation. The percentage rate is 2/N where N is the life of the asset. \\n\\nWith this method, the basis never becomes zero. Consequently, it is standard practice to switch to another depreciation method as the basis decreases. Usually the taxpayer will convert to the straight line method when the annual depreciation from the declining balance becomes less than the straight line.\\n\\nSTRAIGHT-LINE\\nThe straight-line method of depreciation charges equal amounts of depreciation to each period over the useful life of the asset. It is determined by subtracting the residual value from the initial cost and dividing it by the number of the years of estimated life.  Due to its simplicity, it is the most widely used method.\\n\\nACCELERATED\\nA method of depreciation that recognizes higher amounts of depreciation in the earlier years and lower amounts in the later years of a fixed asset's life.  Greater tax benefits are taken in the earlier years.   Over an extended period of time as depreciation moves down the maintenance costs increase and tend to even out the charges to income.\\n\\nACCELERATED (ACRS)\\nA system of depreciation for tax purposes as mandated by the Economic Recovery Act (ERA) of 1981 and modified by the Tax Reform Act of 1986.  Fixed Assets are identified by class and depreciation is determined by this class as opposed to statutory tables. A taxpayer may make an irrevocable decision to treat all property in one of the classes.  The purpose of ACRS is to encourage capital investments by business by permitting a faster recovery of the asset cost, which provides larger tax benefits in the earlier years.\\n\\nPERCENTAGE OF COMPLETION\\nPERCENTAGE OF COMPLETION METHOD OF ACCOUNTING is instituted if your revenues exceed $10,000,000 (3-year average) or your contracts will not be completed within a two-year period, you are generally required to use the percentage of completion accounting for contracts. There are many advantages to using to percentage of completion method including:  It is the best measurement of income. Percentage of completion normally needs to be computed for financial statement purposes eliminating confusing timing differences from tax to financial statements. \\n\\nUNITS-OF-PRODUCTION\\nThe units-of-production method determines depreciation expense based on the amount the asset is used. The length of life of an asset is expressed in a form of productive capacity. The initial cost less any residual value is divided by productive capacity to determine a rate of unit-of-production depreciation per units of usage. Units of usage c\\ncan be expressed in quantity of goods produced, hours used, number of cuttings, miles driven or tons hauled, for instance. The depreciation expense of a period is determined by multiplying usage by a fixed unit-of-production rate of usage. This depreciation method is commonly used when asset usage varies from year-to-year.\\n\\nSUM-OF-YEARS-DIGITS\\nThe sum-of-the-years-digits method is an another form of accelerated depreciation. The annual depreciation is calculated by subtracting salvage value from original cost, and multiplying this figure by a fractional rate of depreciation. The denominator of the fraction is the sum of the years of useful life; for a life of 5 years, the denominator is = 1 + 2 + 3 + 4 + 5 = 15. The numerator is the year in reverse order. For the first year, the numerator is 5 and the fraction is 5/15.\\n\\nMODIFIED ACCELERATED COST RECOVERY (MACRS)\\nA method of accelerated depreciation which classifies depreciable assets into a specific recovery period, each of which has a designated allowable depreciation method.\\n\\nMODIFIED ACCELERATED COST RECOVERY SYSTEM (MACRS) is a system used in accounting to define the rate and method under which a fixed asset will be depreciated for tax purposes.\\n\\nDOUBLE DECLINING BALANCE\\nAn accelerated depreciation method in which a percentage factor of twice the straight-line rate is multiplied each year by the declining balance of the asset's book value.   To determine the annual depreciation expense, the asset's book value at the beginning of the period is multiplied by the double declining rate.\",\"primaryKey\":[\"DepreciationMethodId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Depreciation Method.\",\"isNullable\":false,\"name\":\"DepreciationMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of the Depreciation Method.\",\"isNullable\":true,\"name\":\"DepreciationMethodName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"DepreciationMethod.cdm.json/DepreciationMethod\",\"name\":\"DepreciationMethodDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of the Depreciation Method.\",\"isNullable\":true,\"name\":\"DepreciationMethodDescription\"}]}}}",
								"Description": "An accounting method for spreading out the original cost over the estimated life of the fixed assets.\n\nDepreciation expense is listed in the Income Statement and reduces the net income for that year.\n\nPopular Depreciation Methods are:\n\nDECLINING BALANCE\nDeclining Balance  is an accelerated depreciation method in which an asset's book value is multiplied by a constant depreciation rate (such as double the straight-line percentage, in the case of double-declining-balance.). \n\nThis depreciation method is allowed by the U.S. tax code and gives a larger depreciation in the early years of an asset. Unlike the straight line and the sum of the digits methods, both of which use the original basis to calculate the depreciation each year, the double declining balance uses a fixed percentage of the prior year's basis to calculate depreciation. The percentage rate is 2/N where N is the life of the asset. \n\nWith this method, the basis never becomes zero. Consequently, it is standard practice to switch to another depreciation method as the basis decreases. Usually the taxpayer will convert to the straight line method when the annual depreciation from the declining balance becomes less than the straight line.\n\nSTRAIGHT-LINE\nThe straight-line method of depreciation charges equal amounts of depreciation to each period over the useful life of the asset. It is determined by subtracting the residual value from the initial cost and dividing it by the number of the years of estimated life.  Due to its simplicity, it is the most widely used method.\n\nACCELERATED\nA method of depreciation that recognizes higher amounts of depreciation in the earlier years and lower amounts in the later years of a fixed asset's life.  Greater tax benefits are taken in the earlier years.   Over an extended period of time as depreciation moves down the maintenance costs increase and tend to even out the charges to income.\n\nACCELERATED (ACRS)\nA system of depreciation for tax purposes as mandated by the Economic Recovery Act (ERA) of 1981 and modified by the Tax Reform Act of 1986.  Fixed Assets are identified by class and depreciation is determined by this class as opposed to statutory tables. A taxpayer may make an irrevocable decision to treat all property in one of the classes.  The purpose of ACRS is to encourage capital investments by business by permitting a faster recovery of the asset cost, which provides larger tax benefits in the earlier years.\n\nPERCENTAGE OF COMPLETION\nPERCENTAGE OF COMPLETION METHOD OF ACCOUNTING is instituted if your revenues exceed $10,000,000 (3-year average) or your contracts will not be completed within a two-year period, you are generally required to use the percentage of completion accounting for contracts. There are many advantages to using to percentage of completion method including:  It is the best measurement of income. Percentage of completion normally needs to be computed for financial statement purposes eliminating confusing timing differences from tax to financial statements. \n\nUNITS-OF-PRODUCTION\nThe units-of-production method determines depreciation expense based on the amount the asset is used. The length of life of an asset is expressed in a form of productive capacity. The initial cost less any residual value is divided by productive capacity to determine a rate of unit-of-production depreciation per units of usage. Units of usage c\ncan be expressed in quantity of goods produced, hours used, number of cuttings, miles driven or tons hauled, for instance. The depreciation expense of a period is determined by multiplying usage by a fixed unit-of-production rate of usage. This depreciation method is commonly used when asset usage varies from year-to-year.\n\nSUM-OF-YEARS-DIGITS\nThe sum-of-the-years-digits method is an another form of accelerated depreciation. The annual depreciation is calculated by subtracting salvage value from original cost, and multiplying this figure by a fractional rate of depreciation. The denominator of the fraction is the sum of the years of useful life; for a life of 5 years, the denominator is = 1 + 2 + 3 + 4 + 5 = 15. The numerator is the year in reverse order. For the first year, the numerator is 5 and the fraction is 5/15.\n\nMODIFIED ACCELERATED COST RECOVERY (MACRS)\nA method of accelerated depreciation which classifies depreciable assets into a specific recovery period, each of which has a designated allowable depreciation method.\n\nMODIFIED ACCELERATED COST RECOVERY SYSTEM (MACRS) is a system used in accounting to define the rate and method under which a fixed asset will be depreciated for tax purposes.\n\nDOUBLE DECLINING BALANCE\nAn accelerated depreciation method in which a percentage factor of twice the straight-line rate is multiplied each year by the declining balance of the asset's book value.   To determine the annual depreciation expense, the asset's book value at the beginning of the period is multiplied by the double declining rate.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "DepreciationMethodId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"DepreciationMethodId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"DepreciationMethodName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DepreciationMethodDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "20612e79-c678-4b8d-83a3-fb460508bfd8",
							"Description": "An accounting method for spreading out the original cost over the estimated life of the fixed assets.\n\nDepreciation expense is listed in the Income Statement and reduces the net income for that year.\n\nPopular Depreciation Methods are:\n\nDECLINING BALANCE\nDeclining Balance  is an accelerated depreciation method in which an asset's book value is multiplied by a constant depreciation rate (such as double the straight-line percentage, in the case of double-declining-balance.). \n\nThis depreciation method is allowed by the U.S. tax code and gives a larger depreciation in the early years of an asset. Unlike the straight line and the sum of the digits methods, both of which use the original basis to calculate the depreciation each year, the double declining balance uses a fixed percentage of the prior year's basis to calculate depreciation. The percentage rate is 2/N where N is the life of the asset. \n\nWith this method, the basis never becomes zero. Consequently, it is standard practice to switch to another depreciation method as the basis decreases. Usually the taxpayer will convert to the straight line method when the annual depreciation from the declining balance becomes less than the straight line.\n\nSTRAIGHT-LINE\nThe straight-line method of depreciation charges equal amounts of depreciation to each period over the useful life of the asset. It is determined by subtracting the residual value from the initial cost and dividing it by the number of the years of estimated life.  Due to its simplicity, it is the most widely used method.\n\nACCELERATED\nA method of depreciation that recognizes higher amounts of depreciation in the earlier years and lower amounts in the later years of a fixed asset's life.  Greater tax benefits are taken in the earlier years.   Over an extended period of time as depreciation moves down the maintenance costs increase and tend to even out the charges to income.\n\nACCELERATED (ACRS)\nA system of depreciation for tax purposes as mandated by the Economic Recovery Act (ERA) of 1981 and modified by the Tax Reform Act of 1986.  Fixed Assets are identified by class and depreciation is determined by this class as opposed to statutory tables. A taxpayer may make an irrevocable decision to treat all property in one of the classes.  The purpose of ACRS is to encourage capital investments by business by permitting a faster recovery of the asset cost, which provides larger tax benefits in the earlier years.\n\nPERCENTAGE OF COMPLETION\nPERCENTAGE OF COMPLETION METHOD OF ACCOUNTING is instituted if your revenues exceed $10,000,000 (3-year average) or your contracts will not be completed within a two-year period, you are generally required to use the percentage of completion accounting for contracts. There are many advantages to using to percentage of completion method including:  It is the best measurement of income. Percentage of completion normally needs to be computed for financial statement purposes eliminating confusing timing differences from tax to financial statements. \n\nUNITS-OF-PRODUCTION\nThe units-of-production method determines depreciation expense based on the amount the asset is used. The length of life of an asset is expressed in a form of productive capacity. The initial cost less any residual value is divided by productive capacity to determine a rate of unit-of-production depreciation per units of usage. Units of usage c\ncan be expressed in quantity of goods produced, hours used, number of cuttings, miles driven or tons hauled, for instance. The depreciation expense of a period is determined by multiplying usage by a fixed unit-of-production rate of usage. This depreciation method is commonly used when asset usage varies from year-to-year.\n\nSUM-OF-YEARS-DIGITS\nThe sum-of-the-years-digits method is an another form of accelerated depreciation. The annual depreciation is calculated by subtracting salvage value from original cost, and multiplying this figure by a fractional rate of depreciation. The denominator of the fraction is the sum of the years of useful life; for a life of 5 years, the denominator is = 1 + 2 + 3 + 4 + 5 = 15. The numerator is the year in reverse order. For the first year, the numerator is 5 and the fraction is 5/15.\n\nMODIFIED ACCELERATED COST RECOVERY (MACRS)\nA method of accelerated depreciation which classifies depreciable assets into a specific recovery period, each of which has a designated allowable depreciation method.\n\nMODIFIED ACCELERATED COST RECOVERY SYSTEM (MACRS) is a system used in accounting to define the rate and method under which a fixed asset will be depreciated for tax purposes.\n\nDOUBLE DECLINING BALANCE\nAn accelerated depreciation method in which a percentage factor of twice the straight-line rate is multiplied each year by the declining balance of the asset's book value.   To determine the annual depreciation expense, the asset's book value at the beginning of the period is multiplied by the double declining rate."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ExchangeRateType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ExchangeRateTypeId",
										"Description": "The unique identifier of a Exchange Rate Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ExchangeRateType.cdm.json/ExchangeRateType",
											"Name": "ExchangeRateTypeId"
										}
									},
									{
										"Name": "ExchangeRateTypeName",
										"Description": "The name of a Exchange Rate Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ExchangeRateType.cdm.json/ExchangeRateType",
											"Name": "ExchangeRateTypeName"
										}
									},
									{
										"Name": "ExchangeRateTypeDescription",
										"Description": "The description of a Exchange Rate Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ExchangeRateType.cdm.json/ExchangeRateType",
											"Name": "ExchangeRateTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "4fbeec34-44c4-4d91-9453-b5a190bac728",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/ExchangeRateType",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/ExchangeRateType",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ExchangeRateTypeId\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeId\"},\"ExchangeRateTypeName\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeName\"},\"ExchangeRateTypeDescription\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ExchangeRateType\",\"path\":\"ExchangeRateType.cdm.json/ExchangeRateType\"},\"description\":\"A type of exchange rate.\\n\\nEx:\\n- Retail Buy\\n- Retail Sell\\n- Interbranch Buy\\n- Interbranch Sell\\n- Interbank Buy\\n- Interbank Sell\",\"primaryKey\":[\"ExchangeRateTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Exchange Rate Type.\",\"isNullable\":false,\"name\":\"ExchangeRateTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Exchange Rate Type.\",\"isNullable\":true,\"name\":\"ExchangeRateTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ExchangeRateType.cdm.json/ExchangeRateType\",\"name\":\"ExchangeRateTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a Exchange Rate Type.\",\"isNullable\":true,\"name\":\"ExchangeRateTypeDescription\"}]}}}",
								"Description": "A type of exchange rate.\n\nEx:\n- Retail Buy\n- Retail Sell\n- Interbranch Buy\n- Interbranch Sell\n- Interbank Buy\n- Interbank Sell",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "ExchangeRateTypeId",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ExchangeRateTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ExchangeRateTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ExchangeRateTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "0c1bbfb2-5bfe-4b89-8518-0e142dc710c7",
							"Description": "A type of exchange rate.\n\nEx:\n- Retail Buy\n- Retail Sell\n- Interbranch Buy\n- Interbranch Sell\n- Interbank Buy\n- Interbank Sell"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "FinancialStatement",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "CDMDatabase",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "LegalEntityId",
										"Description": "The unique identifier of a Legal Entity.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "LegalEntityId"
										}
									},
									{
										"Name": "FinancialStatementId",
										"Description": "The unique identifier of a Financial Statement.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "FinancialStatementId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the financial statement is prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "FinancialStatementName",
										"Description": "The name of the Financial Statement.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "FinancialStatementName"
										}
									},
									{
										"Name": "FinancialStatementDescription",
										"Description": "The description of the Financial Statement.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "FinancialStatementDescription"
										}
									},
									{
										"Name": "FinancialStatementPreparationDate",
										"Description": "The date that the Financial Statement was prepared.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "FinancialStatementPreparationDate"
										}
									},
									{
										"Name": "AccountantsOpinionStatement",
										"Description": "A signed statement regarding the financial status of an entity from an independent public accountant after examination of that entities records and accounts.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "AccountantsOpinionStatement"
										}
									},
									{
										"Name": "FinancialStatementTypeId",
										"Description": "The unique identifier of a Financial Statement Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FinancialStatement.cdm.json/FinancialStatement",
											"Name": "FinancialStatementTypeId"
										}
									}
								],
								"ColumnSetEntityName": "dab4b979-b8ef-45a2-8d89-65994e552d5a",
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/FinancialStatement",
										"delimiter": ",",
										"firstRowAsHeader": "false",
										"multiLine": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dlsdtrpocfs1@dtrwol5bg6xm2xfkpoc.dfs.core.windows.net/CDMDatabase/FinancialStatement",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"LegalEntityId\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"LegalEntityId\"},\"FinancialStatementId\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementId\"},\"PeriodStartDate\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"PeriodEndDate\"},\"FinancialStatementName\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementName\"},\"FinancialStatementDescription\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementDescription\"},\"FinancialStatementPreparationDate\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementPreparationDate\"},\"AccountantsOpinionStatement\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"AccountantsOpinionStatement\"},\"FinancialStatementTypeId\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementTypeId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"FinancialStatement\",\"path\":\"FinancialStatement.cdm.json/FinancialStatement\"},\"description\":\"Financial statements provide a format for the reporting of accounting information. The format and names of the required financial statements is different for each of the accounting frameworks.\",\"primaryKey\":[\"LegalEntityId\",\"FinancialStatementId\",\"PeriodStartDate\",\"PeriodEndDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"LegalEntityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Legal Entity.\",\"isNullable\":false,\"name\":\"LegalEntityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Financial Statement.\",\"isNullable\":false,\"name\":\"FinancialStatementId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the financial statement is prepared.\",\"isNullable\":false,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of the Financial Statement.\",\"isNullable\":true,\"name\":\"FinancialStatementName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of the Financial Statement.\",\"isNullable\":true,\"name\":\"FinancialStatementDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementPreparationDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Financial Statement was prepared.\",\"isNullable\":true,\"name\":\"FinancialStatementPreparationDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"AccountantsOpinionStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A signed statement regarding the financial status of an entity from an independent public accountant after examination of that entities records and accounts.\",\"isNullable\":true,\"name\":\"AccountantsOpinionStatement\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"FinancialStatement.cdm.json/FinancialStatement\",\"name\":\"FinancialStatementTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Financial Statement Type.\",\"isNullable\":true,\"name\":\"FinancialStatementTypeId\"}]}}}",
								"Description": "Financial statements provide a format for the reporting of accounting information. The format and names of the required financial statements is different for each of the accounting frameworks.",
								"DisplayFolderInfo": "{\"name\":\"Accounting & Financial Reporting\",\"colorCode\":\"#0078D4\"}",
								"PrimaryKeys": "LegalEntityId,FinancialStatementId,PeriodStartDate,PeriodEndDate",
								"spark.sql.sources.provider": "csv",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"LegalEntityId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FinancialStatementId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodStartDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PeriodEndDate\",\"type\":\"date\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FinancialStatementName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FinancialStatementDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FinancialStatementPreparationDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"AccountantsOpinionStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FinancialStatementTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "b0174185-804f-4b75-bfbb-75739f32017f",
							"Description": "Financial statements provide a format for the reporting of accounting information. The format and names of the required financial statements is different for each of the accounting frameworks."
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dtrwol5bg6xm2xfkpocws1p1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_ChannelType_Territory')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ChannelTypeTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ChannelType_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetChannelType": {},
									"ChannelTypeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TerritoryTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Territory_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesTerritoryDeltaSource": {},
									"TerritorySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/ChannelType_DataFlow1')]",
				"[concat(variables('workspaceId'), '/dataflows/Territory_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Country')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CountryTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Country_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"CountrySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Country_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_IndividualCustomer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IndividualCustomerTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IndividualCustomer_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"IndividualCustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/IndividualCustomer_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Item_ProductCategoryDim')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ItemTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Item_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ItemSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ProductCategoryDimTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductCategoryDim_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ProductCategoryDimSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:29Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Item_DataFlow1')]",
				"[concat(variables('workspaceId'), '/dataflows/ProductCategoryDim_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Location')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LocationTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Location_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"LocationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:31Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Location_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Channel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ChannelTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Channel_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"SalesSource": {},
									"SalesTerritorySource": {},
									"TargetChannelType": {},
									"ChannelSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Channel_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Country2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Country2Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Country2_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetCountry": {},
									"CountrySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Country2_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Location2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Location2Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Location2_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"LocationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:43Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Location2_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Product')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ProductTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Product_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Product_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L2_Customer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CustomerTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Customer_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"CustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Customer_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L2_TransactionLineItem')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TransactionLineItemTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransactionLineItem_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesDeltaSource": {},
									"SalesOrderSource": {},
									"TransactionLineItemSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:06:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/TransactionLineItem_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L3_Transaction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TransactionTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Transaction_DataFlow1",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesOrderDeltaSource": {},
									"SalesSource": {},
									"CustomerDataSource": {},
									"ResellerSource": {},
									"TransactionSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:07:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Transaction_DataFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F0_ChannelType_Territory_Channel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_ChannelType_Territory",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_ChannelType_Territory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Channel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_ChannelType_Territory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Channel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:07:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_ChannelType_Territory')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Channel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F1_Country_Country2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Country",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Country",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Country1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Country",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Country2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:07:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Country')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Country2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F3_Item_ProductCategoryDim_Product_TransactionLineItem')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Item_ProductCategoryDim",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Item_ProductCategoryDim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Item_ProductCategoryDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L2_TransactionLineItem",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L1_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L2_TransactionLineItem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:07:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Item_ProductCategoryDim')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Product')]",
				"[concat(variables('workspaceId'), '/pipelines/L2_TransactionLineItem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F4_Location_Location1_Customer_Transaction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Location",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Location1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Location2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L2_Customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L1_Location1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L2_Customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L3_Transaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L2_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L3_Transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:07:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Location')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Location2')]",
				"[concat(variables('workspaceId'), '/pipelines/L2_Customer')]",
				"[concat(variables('workspaceId'), '/pipelines/L3_Transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StartingPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "F0_ChannelType_Territory_Channel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_IndividualCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F0_ChannelType_Territory_Channel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F1_Country_Country1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F0_ChannelType_Territory_Channel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F1_Country_Country2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F4_Location_Location1_Customer_Transacti",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F1_Country_Country1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F4_Location_Location1_Customer_Transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F3_Item_ProductCategoryDim_Product_Trans",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F4_Location_Location1_Customer_Transacti",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F3_Item_ProductCategoryDim_Product_TransactionLineItem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L0_IndividualCustomer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_IndividualCustomer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:08:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/F0_ChannelType_Territory_Channel')]",
				"[concat(variables('workspaceId'), '/pipelines/F1_Country_Country2')]",
				"[concat(variables('workspaceId'), '/pipelines/F4_Location_Location1_Customer_Transaction')]",
				"[concat(variables('workspaceId'), '/pipelines/F3_Item_ProductCategoryDim_Product_TransactionLineItem')]",
				"[concat(variables('workspaceId'), '/pipelines/L0_IndividualCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IngestTripDataIntoADLS",
						"description": "Copies the trip data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tripDataSink",
								"type": "DatasetReference",
								"parameters": {
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "IngestTripFaresDataIntoADLS",
						"description": "Copies the trip fare data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "faresDataSink",
								"type": "DatasetReference",
								"parameters": {
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JoinAndAggregateData",
						"description": "Reads the raw data from both CSV files inside the ADLS, performs the desired transformations (inner join and aggregation) and writes the transformed data into the synapse SQL pool.",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "tripFaresDataTransformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripDataCSV": {
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										}
									},
									"FaresDataCSV": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									},
									"SynapseAnalyticsSink": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"SynapseWorkspaceName": {
											"value": "@pipeline().parameters.SynapseWorkspaceName",
											"type": "Expression"
										},
										"SQLDedicatedPoolName": {
											"value": "@pipeline().parameters.SQLDedicatedPoolName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"SQLLoginUsername": {
											"value": "@pipeline().parameters.SQLLoginUsername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Schema If Does Not Exists",
						"description": "Creates the schema inside the SQL dedicated pool. Shema name comes from the pipeline parameter 'SchemaName'.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "IngestTripDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "IngestTripFaresDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '@{pipeline().parameters.SchemaName}')\nBEGIN\nEXEC('CREATE SCHEMA @{pipeline().parameters.SchemaName}')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSynapseAnalyticsSchema",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data Trips Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'TripsData'))\nBEGIN \n   Truncate table TripsData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTripsData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data Fares Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'FaresData'))\nBEGIN \n   Truncate table FaresData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsFaresData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "tripFares"
					},
					"SynapseWorkspaceName": {
						"type": "string",
						"defaultValue": "dtrwol5bg6xm2xfkpocws1.database.windows.net"
					},
					"SQLDedicatedPoolName": {
						"type": "string",
						"defaultValue": "dtrwol5bg6xm2xfkpocws1p1"
					},
					"SQLLoginUsername": {
						"type": "string",
						"defaultValue": "ditrinci"
					},
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "kvdtrwol5bg6xm2xfkpoc"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "dtrwol5bg6xm2xfkpoc"
					}
				},
				"folder": {
					"name": "TripFaresDataPipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T08:08:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripsDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/dataflows/tripFaresDataTransformations')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsSchema')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTripsData')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsFaresData')]",
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdventureWorks_copyPipeline_db2dl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Dumps the content of the adventureworks db, from sql to datalake in parquet format",
				"activities": [
					{
						"name": "ForEach_Table",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_TableToDataLake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "SalesLT.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "adventureworks//@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_cz8",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_cz8",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Address"
								},
								"destination": {
									"fileName": "Address/SalesLTAddress.parquet"
								}
							},
							{
								"source": {
									"table": "Customer"
								},
								"destination": {
									"fileName": "Customer/SalesLTCustomer.parquet"
								}
							},
							{
								"source": {
									"table": "CustomerAddress"
								},
								"destination": {
									"fileName": "CustomerAddress/SalesLTCustomerAddress.parquet"
								}
							},
							{
								"source": {
									"table": "Product"
								},
								"destination": {
									"fileName": "Product/SalesLTProduct.parquet"
								}
							},
							{
								"source": {
									"table": "ProductCategory"
								},
								"destination": {
									"fileName": "ProductCategory/SalesLTProductCategory.parquet"
								}
							},
							{
								"source": {
									"table": "ProductDescription"
								},
								"destination": {
									"fileName": "ProductDescription/SalesLTProductDescription.parquet"
								}
							},
							{
								"source": {
									"table": "ProductModel"
								},
								"destination": {
									"fileName": "ProductModel/SalesLTProductModel.parquet"
								}
							},
							{
								"source": {
									"table": "ProductModelProductDescription"
								},
								"destination": {
									"fileName": "ProductModelProductDescription/SalesLTProductModelProductDescription.parquet"
								}
							},
							{
								"source": {
									"table": "SalesOrderDetail"
								},
								"destination": {
									"fileName": "SalesOrderDetail/SalesLTSalesOrderDetail.parquet"
								}
							},
							{
								"source": {
									"table": "SalesOrderHeader"
								},
								"destination": {
									"fileName": "SalesOrderHeader/SalesLTSalesOrderHeader.parquet"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-04T16:03:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_cz8')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_cz8')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ChannelType_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelTypeSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectDeduplicated1TargetChannelType"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "FilterInsertChannelType"
						},
						{
							"name": "InsertChannelType"
						},
						{
							"name": "SkChannelType"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "DerivedChannelType"
						},
						{
							"name": "PostSkChannelType"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "FinalChannelType"
						},
						{
							"name": "ChannelType"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tBusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tChannelTypeName = BusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectChannelType\nPreSKSelectChannelType aggregate(groupBy(ChannelTypeName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectChannelType\nDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectChannelType\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetChannelType\nSelectDeduplicated1TargetChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetChannelType\nSelectDeduplicated1PreSKSelectChannelType, SelectTarSelectDeduplicated1TargetChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(isNull(TarChannelTypeId)) ~> FilterInsertChannelType\nFilterInsertChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertChannelType\nInsertChannelType keyGenerate(output(Sk_ChannelTypeId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkChannelType\nSelectTarSelectDeduplicated1TargetChannelType aggregate(Max_TarChannelTypeId = max(toInteger(TarChannelTypeId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetChannelType\nAggregatedSelectTarSelectDeduplicated1TargetChannelType derive(Max_TarChannelTypeId = iif(isNull(Max_TarChannelTypeId),0,Max_TarChannelTypeId)) ~> MaxSelectTarSelectDeduplicated1TargetChannelType\nSkChannelType, MaxSelectTarSelectDeduplicated1TargetChannelType join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetChannelType\nJoinMaxSelectTarSelectDeduplicated1TargetChannelType derive(ChannelTypeId = Sk_ChannelTypeId + Max_TarChannelTypeId) ~> DerivedChannelType\nDerivedChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(!isNull(TarChannelTypeId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectChannelType\nFilterUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectChannelType\nPostSkChannelType, UpdateSelectDeduplicated1PreSKSelectChannelType union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectChannelType\nUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nPreSKSelectChannelType, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalChannelType\nFinalChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> ChannelType\nChannelType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelTypeSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Channel_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "SalesTerritorySource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1SalesTerritorySource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "JoinSalesTerritory"
						},
						{
							"name": "SelectJoinSalesTerritory"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectChannelType"
						},
						{
							"name": "JoinForChannelTypeId"
						},
						{
							"name": "SelectForChannelTypeId"
						},
						{
							"name": "Channel"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritorySource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nReseller, Sales join(Reseller@ResellerKey === Sales@ResellerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSales\nSalesTerritorySource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritorySource\nDeduplicated1SalesTerritorySource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nJoinSales, SalesTerritory join(Sales@SalesTerritoryKey === SalesTerritory@SalesTerritoryKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSalesTerritory\nJoinSalesTerritory select(mapColumn(\n\t\tBusinessTypeAlias = BusinessType,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated = SalesTerritory@SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesTerritory\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeId,\n\t\tChannelTypeNameAlias = ChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectChannelType\nSelectJoinSalesTerritory, SelectChannelType join(BusinessTypeAlias === ChannelTypeNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForChannelTypeId\nJoinForChannelTypeId select(mapColumn(\n\t\tBusinessTypeAlias,\n\t\tReseller_ResellerKey_Generated,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForChannelTypeId\nSelectForChannelTypeId select(mapColumn(\n\t\tChannelId = Reseller_ResellerKey_Generated,\n\t\tChannelKey = ResellerId,\n\t\tChannelName = Reseller,\n\t\tTerritoryId = SalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Channel\nChannel sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Channel',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryIdLookupFunction"
						},
						{
							"name": "SelectForCountryIdLookupFunction"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "JoinForLocationId"
						},
						{
							"name": "SelectForLocationId"
						},
						{
							"name": "Customer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tPostalCodeAlias = PostalCode,\n\t\tStateProvinceAlias = StateProvince,\n\t\tCityAlias = City,\n\t\tCountryRegionAlias = CountryRegion,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated = CustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryIdLookupFunction = CountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryIdLookupFunction\nJoinForCountryIdLookupFunction select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tCountryIdLookupFunction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryIdLookupFunction\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId),\n\t\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationId,\n\t\tLocationZipAlias = LocationZip,\n\t\tLocationStateAlias = LocationState,\n\t\tLocationCityAlias = LocationCity,\n\t\tCountryIdAlias = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLocation\nSelectForCountryIdLookupFunction, SelectLocation join(PostalCodeAlias === LocationZipAlias\n\t&& StateProvinceAlias === LocationStateAlias\n\t&& CityAlias === LocationCityAlias\n\t&& CountryIdLookupFunction === CountryIdAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForLocationId\nJoinForLocationId select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForLocationId\nSelectForLocationId select(mapColumn(\n\t\tLocationId,\n\t\tCustomerKey = CustomerId,\n\t\tCustomerId = CustomerData_CustomerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Customer\nCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Customer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IndividualCustomer_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "IndividualCustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "IndividualCustomer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tCustomerId = CustomerKey,\n\t\tIndividualCustomerName = Customer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> IndividualCustomer\nIndividualCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'IndividualCustomer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> IndividualCustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Item_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Item"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tSKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tItemSku = SKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Item\nItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Item',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectReseller, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProductCategoryDim_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductCategoryDimSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "ProductCategoryDim"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tModel,\n\t\tSubcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tModel,\n\t\tSubCategory = Subcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductCategoryDim\nProductCategoryDim sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ProductCategoryDim',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductCategoryDimSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Product_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Product"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tSKU,\n\t\tProduct,\n\t\tColor\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tItemSku = SKU,\n\t\tProductName = Product,\n\t\tProductColor = Color\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Product\nProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Product',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Territory_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesTerritoryDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "TerritorySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesTerritoryDeltaSource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "SelectSalesTerritory"
						},
						{
							"name": "Territory"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritoryDeltaSource\nSalesTerritoryDeltaSource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritoryDeltaSource\nDeduplicated1SalesTerritoryDeltaSource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSalesTerritory\nSelectSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tTerritoryId = SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Territory\nTerritory sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Territory',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TerritorySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TransactionLineItem_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesDeltaSource"
						},
						{
							"name": "SalesOrderSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionLineItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesDeltaSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "Deduplicated1SalesOrderSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "JoinSalesOrder"
						},
						{
							"name": "SelectJoinSalesOrder"
						},
						{
							"name": "TransactionLineItem"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesDeltaSource\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderSource\nSalesDeltaSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesDeltaSource\nDeduplicated1SalesDeltaSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrderSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderSource\nDeduplicated1SalesOrderSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSales, SalesOrder join(Sales@SalesOrderLineKey === SalesOrder@SalesOrderLineKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSalesOrder\nJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tSalesOrder,\n\t\tSales_SalesOrderLineKey_Generated = Sales@SalesOrderLineKey,\n\t\tProductKey,\n\t\tOrderQuantity,\n\t\tUnitPrice,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tSalesAmount,\n\t\tUnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesOrder\nSelectJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tTransactionId = SalesOrder,\n\t\tTransactionLineItemId = Sales_SalesOrderLineKey_Generated,\n\t\tProductId = ProductKey,\n\t\tQuantity = OrderQuantity,\n\t\tProductListPriceAmount = UnitPrice,\n\t\tTransactionProductPriceAmount = TotalProductCost,\n\t\tTotalTransactionLineItemAmount = ProductStandardCost,\n\t\tTotalTransactionSalesPriceAmount = SalesAmount,\n\t\tProductPriceAdjustmentPercentage = UnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> TransactionLineItem\nTransactionLineItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'TransactionLineItem',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionLineItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesOrderDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "CustomerDataSource"
						},
						{
							"name": "ResellerSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesOrderDeltaSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1CustomerDataSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "JoinCustomerData"
						},
						{
							"name": "Deduplicated1ResellerSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "JoinReseller"
						},
						{
							"name": "SelectJoinReseller"
						},
						{
							"name": "Transaction"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataSource\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerSource\nSalesOrderDeltaSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderDeltaSource\nDeduplicated1SalesOrderDeltaSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrder, Sales join(SalesOrder@SalesOrderLineKey === Sales@SalesOrderLineKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSales\nCustomerDataSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataSource\nDeduplicated1CustomerDataSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nJoinSales, CustomerData join(Sales@CustomerKey === CustomerData@CustomerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinCustomerData\nResellerSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerSource\nDeduplicated1ResellerSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nJoinCustomerData, Reseller join(Sales@ResellerKey === Reseller@ResellerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinReseller\nJoinReseller select(mapColumn(\n\t\tSalesOrder,\n\t\tCustomerData_CustomerKey_Generated = CustomerData@CustomerKey,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinReseller\nSelectJoinReseller select(mapColumn(\n\t\tTransactionId = SalesOrder,\n\t\tCustomerId = CustomerData_CustomerKey_Generated,\n\t\tChannelId = Reseller_ResellerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Transaction\nTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Transaction',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripFaresDataTransformations')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TripFaresDataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tripDataSink",
								"type": "DatasetReference"
							},
							"name": "TripDataCSV"
						},
						{
							"dataset": {
								"referenceName": "faresDataSink",
								"type": "DatasetReference"
							},
							"name": "FaresDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureSynapseAnalyticsTable",
								"type": "DatasetReference"
							},
							"name": "SynapseAnalyticsSink"
						}
					],
					"transformations": [
						{
							"name": "AggregateByPaymentType"
						},
						{
							"name": "InnerJoinWithTripFares"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as string,\n\t\ttrip_time_in_secs as string,\n\t\ttrip_distance as string,\n\t\tpickup_longitude as string,\n\t\tpickup_latitude as string,\n\t\tdropoff_longitude as string,\n\t\tdropoff_latitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> TripDataCSV\nsource(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\tpickup_datetime as string,\n\t\tpayment_type as string,\n\t\tfare_amount as string,\n\t\tsurcharge as string,\n\t\tmta_tax as string,\n\t\ttip_amount as string,\n\t\ttolls_amount as string,\n\t\ttotal_amount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> FaresDataCSV\nInnerJoinWithTripFares aggregate(groupBy(payment_type),\n\taverage_fare = avg(toInteger(total_amount)),\n\t\ttotal_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPaymentType\nTripDataCSV, FaresDataCSV join(TripDataCSV@medallion == FaresDataCSV@medallion\n\t&& TripDataCSV@hack_license == FaresDataCSV@hack_license\n\t&& TripDataCSV@vendor_id == FaresDataCSV@vendor_id\n\t&& TripDataCSV@pickup_datetime == FaresDataCSV@pickup_datetime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InnerJoinWithTripFares\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SynapseAnalyticsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling - NYC taxi predict using Spark MLlib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Spark32",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8753d5d4-c1df-4c63-b3fe-20c3fd3af157"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1/bigDataPools/Spark32",
						"name": "Spark32",
						"type": "Spark",
						"endpoint": "https://dtrwol5bg6xm2xfkpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark32",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a tip or not.\n",
							"\n",
							" https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-machine-learning-mllib-notebook\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Explore sample data with Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ws1sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9e62583e-dc2f-4f4f-bfdb-31cecce14927"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/synapsetest/providers/Microsoft.Synapse/workspaces/tdicuzitkgetljompocws1/bigDataPools/ws1sparkpool1",
						"name": "ws1sparkpool1",
						"type": "Spark",
						"endpoint": "https://tdicuzitkgetljompocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Explore NYC Yellow Taxi Data using Spark\n",
							"\n",
							"In this notebook, you'll learn the basic steps to load and analyze an Open Dataset that tracks NYC Yellow Taxi trips with Apache Spark for Azure Synapse.\n",
							"\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Load Data\n",
							"\n",
							"Read NYC Yellow Taxi data as a Spark DataFrame object to manipulate."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Read NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"df_nyc_tlc = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Analyze the NYC Taxi data using Spark and notebooks\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_nyc_tlc.printSchema()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"AvgTripDistance"
									],
									"values": [
										"passengerCount"
									],
									"yLabel": "passengerCount",
									"xLabel": "AvgTripDistance",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"passengerCount\":{\"2.382\":7,\"2.9365876998482907\":0,\"2.955385293728598\":1,\"3.0823106614325835\":6,\"3.1096431007047065\":5,\"3.124120509875713\":3,\"3.132080374155551\":4,\"3.1983281312300624\":2,\"6.23\":9,\"7.831666666666666\":8}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as F\n",
							"df_nyc = df_nyc_tlc.groupBy(\"passengerCount\").agg(F.avg('tripDistance').alias('AvgTripDistance'), F.sum('tripDistance').alias('SumTripDistance'))\n",
							"display(df_nyc)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Customize data visualization with Spark and notebooks\n",
							"You can control how charts render by using notebooks. The following code shows a simple example. It uses the popular libraries matplotlib and seaborn. The code renders the same kind of line chart as the SQL queries we ran earlier.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot\n",
							"import seaborn\n",
							"\n",
							"seaborn.set(style = \"whitegrid\")\n",
							"pdf_nyc = df_nyc.toPandas()\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"SumTripDistance\" , data = pdf_nyc)\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"AvgTripDistance\" , data = pdf_nyc)\n",
							"matplotlib.pyplot.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Clean up resources\n",
							"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\n",
							"\n",
							"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Using Azure Open Datasets in Synapse')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ws1sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "afc35ded-d6d3-422e-ac4a-6953243cef7c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1/bigDataPools/ws1sparkpool1",
						"name": "ws1sparkpool1",
						"type": "Spark",
						"endpoint": "https://dtrwol5bg6xm2xfkpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
							"\n",
							"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
							"- read Azure Open Dataset\n",
							"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
							"- create a Spark table to be used in other notebooks for modeling training"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data loading \n",
							"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NycTlcGreen\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"end_date = parser.parse('2018-06-06')\n",
							"start_date = parser.parse('2018-05-01')\n",
							"\n",
							"nyc_tlc = NycTlcGreen(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"\n",
							"nyc_tlc_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that the initial data is loaded. Let's do some projection on the data to \n",
							"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
							"- add a static feature for the country code to join holiday data. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
							"\n",
							"import pyspark.sql.functions as f\n",
							"\n",
							"nyc_tlc_df_expand = nyc_tlc_df.withColumn('datetime',f.to_date('lpepPickupDatetime'))\\\n",
							"                .withColumn('month_num',f.month(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('day_of_month',f.dayofmonth(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('day_of_week',f.dayofweek(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('hour_of_day',f.hour(nyc_tlc_df.lpepPickupDatetime))\\\n",
							"                .withColumn('country_code',f.lit('US'))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"Remove some of the columns that won't need for modeling or additional feature building.\n",
							"\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove unused columns from nyc green taxi data\n",
							"\n",
							"columns_to_remove = [\"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
							"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
							"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
							"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType \"  \n",
							"                    ]\n",
							"\n",
							"nyc_tlc_df_clean = nyc_tlc_df_expand.select([column for column in nyc_tlc_df_expand.columns if column not in columns_to_remove])"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"source": [
							"# Display 5 rows\n",
							"nyc_tlc_df_clean.show(5)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with holiday data\n",
							"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
							"\n",
							"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import PublicHolidays\n",
							"\n",
							"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
							"hol_df = hol.to_spark_dataframe()\n",
							"\n",
							"# Display data\n",
							"hol_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"hol_df_clean = hol_df.withColumnRenamed('countryRegionCode','country_code')\\\n",
							"            .withColumn('datetime',f.to_date('date'))\n",
							"\n",
							"hol_df_clean.show(5)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# enrich taxi data with holiday data\n",
							"nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, on = ['datetime', 'country_code'] , how = 'left')\n",
							"\n",
							"nyc_taxi_holiday_df.show(5)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"# Create a temp table and filter out non empty holiday rows\n",
							"\n",
							"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
							"spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \").show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Enrich with weather data¶\n",
							"\n",
							"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.opendatasets import NoaaIsdWeather\n",
							"\n",
							"isd = NoaaIsdWeather(start_date, end_date)\n",
							"isd_df = isd.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"isd_df.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Filter out weather info for new york city, remove the recording with null temperature \n",
							"\n",
							"weather_df = isd_df.filter(isd_df.latitude >= '40.53')\\\n",
							"                        .filter(isd_df.latitude <= '40.88')\\\n",
							"                        .filter(isd_df.longitude >= '-74.09')\\\n",
							"                        .filter(isd_df.longitude <= '-73.72')\\\n",
							"                        .filter(isd_df.temperature.isNotNull())\\\n",
							"                        .withColumnRenamed('datetime','datetime_full')\n",
							"                         "
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove unused columns\n",
							"\n",
							"columns_to_remove_weather = [\"usaf\", \"wban\", \"longitude\", \"latitude\"]\n",
							"weather_df_clean = weather_df.select([column for column in weather_df.columns if column not in columns_to_remove_weather])\\\n",
							"                        .withColumn('datetime',f.to_date('datetime_full'))\n",
							"\n",
							"weather_df_clean.show(5, truncate = False)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next group the weather data so that you have daily aggregated weather values. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Enrich weather data with aggregation statistics\n",
							"\n",
							"aggregations = {\"snowDepth\": \"mean\", \"precipTime\": \"max\", \"temperature\": \"mean\", \"precipDepth\": \"max\"}\n",
							"weather_df_grouped = weather_df_clean.groupby(\"datetime\").agg(aggregations)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"weather_df_grouped.show(5)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"source": [
							"# Rename columns\n",
							"\n",
							"weather_df_grouped = weather_df_grouped.withColumnRenamed('avg(snowDepth)','avg_snowDepth')\\\n",
							"                                       .withColumnRenamed('avg(temperature)','avg_temperature')\\\n",
							"                                       .withColumnRenamed('max(precipTime)','max_precipTime')\\\n",
							"                                       .withColumnRenamed('max(precipDepth)','max_precipDepth')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# enrich taxi data with weather\n",
							"nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, on = 'datetime' , how = 'left')\n",
							"nyc_taxi_holiday_weather_df.cache()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"nyc_taxi_holiday_weather_df.show(5)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"# Run the describe() function on the new dataframe to see summary statistics for each field.\n",
							"\n",
							"display(nyc_taxi_holiday_weather_df.describe())"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"source": [
							"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Remove invalid rows with less than 0 taxi fare or tip\n",
							"final_df = nyc_taxi_holiday_weather_df.filter(nyc_taxi_holiday_weather_df.tipAmount > 0)\\\n",
							"                                      .filter(nyc_taxi_holiday_weather_df.totalAmount > 0)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Cleaning up the existing Database\n",
							"\n",
							"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
							"\n",
							"Then we recreate the database and set the default database context to it."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
							"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
							"spark.sql(\"USE NYCTaxi\");"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Creating a new table\n",
							"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"\n",
							"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
							"spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\").show();"
						],
						"outputs": [],
						"execution_count": 24
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SentimentAnalysis-With-TextAnalytics')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ws1sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9044ce6b-551d-4a1e-9878-490a6fca00c6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/d2910e0f-a763-4dd8-9c8d-0105ccd0570e/resourceGroups/Synapse2ClickPoc/providers/Microsoft.Synapse/workspaces/dtrwol5bg6xm2xfkpocws1/bigDataPools/ws1sparkpool1",
						"name": "ws1sparkpool1",
						"type": "Spark",
						"endpoint": "https://dtrwol5bg6xm2xfkpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from mmlspark.cognitive import *\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql.functions import explode\n",
							"\n",
							"# Load the data into a Spark DataFrame\n",
							"df = spark.sql(\"SELECT * FROM default.fabrikamcomments\")\n",
							"\n",
							"sentiment = (TextSentiment()\n",
							"    .setLinkedService(\"TextAnalytics\")\n",
							"    .setOutputCol(\"output\")\n",
							"    .setErrorCol(\"error\")\n",
							"    .setLanguage(\"en\")\n",
							"    .setTextCol(\"comment\"))\n",
							"\n",
							"results = sentiment.transform(df)\n",
							"\n",
							"# Show the results\n",
							"display(results\\\n",
							"    .select(\"comment\", explode(\"output\").alias(\"exploded\"), \"error\")\\\n",
							"    .select(\"comment\", \"exploded.*\", \"error\")\\\n",
							"    .limit(10))"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		}
	]
}